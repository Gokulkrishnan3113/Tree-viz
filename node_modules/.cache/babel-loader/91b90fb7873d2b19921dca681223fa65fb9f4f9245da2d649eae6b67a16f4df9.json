{"ast":null,"code":"var _jsxFileName = \"/Users/gokulkrishnan/College/project/treeviz/src/HOME.js\";\n// import React from 'react';\n// import './Home.css'; // Import the external CSS file\n\n// const Home = () => {\n//   return (\n//     <div className=\"data-structures-container\">\n//     <h1 className=\"heading\">Tree Visualizer</h1>\n//     <p className=\"paragraph\">Data structure visualization serves as a beacon in the realm of software engineering, illuminating the intricate organization and functionality of complex algorithms.</p>\n//     <p className=\"paragraph\">Here are some reasons why visualizing data structures is essential:</p>\n//     <ul className=\"list\">\n//         <li><strong>Enhanced Understanding:</strong> Visual representations facilitate a deeper comprehension of data organization and algorithmic processes.</li>\n//         <li><strong>Efficient Debugging:</strong> Visualization aids in identifying and rectifying errors swiftly, ensuring robust software performance.</li>\n//         <li><strong>Performance Analysis:</strong> By visualizing data structures, developers can analyze algorithmic efficiency and optimize for speed and scalability.</li>\n//         <li><strong>Educational Value:</strong> Visualization serves as a valuable teaching tool, allowing students to grasp complex concepts with ease.</li>\n//         <li><strong>Problem-Solving:</strong> Visualization enables users to explore various scenarios and problem-solving approaches with ease.</li>\n\n//     </ul>\n\n//       <h2 className=\"heading\">Data Structures Information</h2>\n//       <table className=\"table data-structures-table\">\n//         <thead>\n//           <tr>\n//             <th>Data Structure</th>\n//             <th>Operation</th>\n//             <th>Description</th>\n//             <th>Time Complexity</th>\n//             <th>Space Complexity</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           <tr>\n//             <td rowSpan=\"4\">Binary Search Tree</td>\n//             <td>Insertion</td>\n//             <td>Inserts a new node into the BST.</td>\n//             <td>O(log n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td>Deletion</td>\n//             <td>Deletes a node from the BST.</td>\n//             <td>O(log n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td>Search</td>\n//             <td>Searches for a node in the BST.</td>\n//             <td>O(log n)</td>\n//             <td>O(1) - for balanced BST, O(n) - for skewed BST</td>\n//           </tr>\n//           <tr>\n//             <td>Traversal</td>\n//             <td>Traverses the BST in different orders (in-order, pre-order, post-order).</td>\n//             <td>O(n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td rowSpan=\"4\">Avl</td>\n//             <td>Insertion</td>\n//             <td>Inserts a new node into the AVL tree and performs rotations to maintain balance.</td>\n//             <td>O(log n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td>Deletion</td>\n//             <td>Deletes a node from the AVL tree and performs rotations to maintain balance.</td>\n//             <td>O(log n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td>Search</td>\n//             <td>Searches for a node in the AVL tree.</td>\n//             <td>O(log n)</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td>Traversal</td>\n//             <td>Traverses the AVL tree in different orders (in-order, pre-order, post-order).</td>\n//             <td>O(n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td rowSpan=\"4\">Tries</td>\n//             <td>Insertion</td>\n//             <td>Inserts a new key into the trie.</td>\n//             <td>O(m), m = length of key</td>\n//             <td>O(n * m), n = number of keys</td>\n//           </tr>\n//           <tr>\n//             <td>Deletion</td>\n//             <td>Deletes a key from the trie.</td>\n//             <td>O(m)</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td>Search</td>\n//             <td>Searches for a key in the trie.</td>\n//             <td>O(m)</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td>Prefix Search</td>\n//             <td>Finds all keys with the given prefix.</td>\n//             <td>O(m), m = length of prefix</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td rowSpan=\"4\">Heaps (Max/Min)</td>\n//             <td>Insertion</td>\n//             <td>Inserts a new element into the heap.</td>\n//             <td>O(log n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td>Deletion</td>\n//             <td>Deletes the root element from the heap.</td>\n//             <td>O(log n)</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td>Extract Max/Min</td>\n//             <td>Extracts the maximum/minimum element from the heap.</td>\n//             <td>O(log n)</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td>Heapify</td>\n//             <td>Builds a heap from an array of elements.</td>\n//             <td>O(n)</td>\n//             <td>O(1)</td>\n//           </tr>\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Home;\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"HOME\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Home","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/HOME.js"],"sourcesContent":["// import React from 'react';\n// import './Home.css'; // Import the external CSS file\n\n// const Home = () => {\n//   return (\n//     <div className=\"data-structures-container\">\n//     <h1 className=\"heading\">Tree Visualizer</h1>\n//     <p className=\"paragraph\">Data structure visualization serves as a beacon in the realm of software engineering, illuminating the intricate organization and functionality of complex algorithms.</p>\n//     <p className=\"paragraph\">Here are some reasons why visualizing data structures is essential:</p>\n//     <ul className=\"list\">\n//         <li><strong>Enhanced Understanding:</strong> Visual representations facilitate a deeper comprehension of data organization and algorithmic processes.</li>\n//         <li><strong>Efficient Debugging:</strong> Visualization aids in identifying and rectifying errors swiftly, ensuring robust software performance.</li>\n//         <li><strong>Performance Analysis:</strong> By visualizing data structures, developers can analyze algorithmic efficiency and optimize for speed and scalability.</li>\n//         <li><strong>Educational Value:</strong> Visualization serves as a valuable teaching tool, allowing students to grasp complex concepts with ease.</li>\n//         <li><strong>Problem-Solving:</strong> Visualization enables users to explore various scenarios and problem-solving approaches with ease.</li>\n\n//     </ul>\n\n\n      \n//       <h2 className=\"heading\">Data Structures Information</h2>\n//       <table className=\"table data-structures-table\">\n//         <thead>\n//           <tr>\n//             <th>Data Structure</th>\n//             <th>Operation</th>\n//             <th>Description</th>\n//             <th>Time Complexity</th>\n//             <th>Space Complexity</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           <tr>\n//             <td rowSpan=\"4\">Binary Search Tree</td>\n//             <td>Insertion</td>\n//             <td>Inserts a new node into the BST.</td>\n//             <td>O(log n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td>Deletion</td>\n//             <td>Deletes a node from the BST.</td>\n//             <td>O(log n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td>Search</td>\n//             <td>Searches for a node in the BST.</td>\n//             <td>O(log n)</td>\n//             <td>O(1) - for balanced BST, O(n) - for skewed BST</td>\n//           </tr>\n//           <tr>\n//             <td>Traversal</td>\n//             <td>Traverses the BST in different orders (in-order, pre-order, post-order).</td>\n//             <td>O(n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td rowSpan=\"4\">Avl</td>\n//             <td>Insertion</td>\n//             <td>Inserts a new node into the AVL tree and performs rotations to maintain balance.</td>\n//             <td>O(log n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td>Deletion</td>\n//             <td>Deletes a node from the AVL tree and performs rotations to maintain balance.</td>\n//             <td>O(log n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td>Search</td>\n//             <td>Searches for a node in the AVL tree.</td>\n//             <td>O(log n)</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td>Traversal</td>\n//             <td>Traverses the AVL tree in different orders (in-order, pre-order, post-order).</td>\n//             <td>O(n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td rowSpan=\"4\">Tries</td>\n//             <td>Insertion</td>\n//             <td>Inserts a new key into the trie.</td>\n//             <td>O(m), m = length of key</td>\n//             <td>O(n * m), n = number of keys</td>\n//           </tr>\n//           <tr>\n//             <td>Deletion</td>\n//             <td>Deletes a key from the trie.</td>\n//             <td>O(m)</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td>Search</td>\n//             <td>Searches for a key in the trie.</td>\n//             <td>O(m)</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td>Prefix Search</td>\n//             <td>Finds all keys with the given prefix.</td>\n//             <td>O(m), m = length of prefix</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td rowSpan=\"4\">Heaps (Max/Min)</td>\n//             <td>Insertion</td>\n//             <td>Inserts a new element into the heap.</td>\n//             <td>O(log n)</td>\n//             <td>O(n)</td>\n//           </tr>\n//           <tr>\n//             <td>Deletion</td>\n//             <td>Deletes the root element from the heap.</td>\n//             <td>O(log n)</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td>Extract Max/Min</td>\n//             <td>Extracts the maximum/minimum element from the heap.</td>\n//             <td>O(log n)</td>\n//             <td>O(1)</td>\n//           </tr>\n//           <tr>\n//             <td>Heapify</td>\n//             <td>Builds a heap from an array of elements.</td>\n//             <td>O(n)</td>\n//             <td>O(1)</td>\n//           </tr>\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Home;\n\nimport React from 'react'\n\nexport const Home = () => {\n  return (\n    <div>HOME</div>\n  )\n}\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACxB,oBACED,OAAA;IAAAE,QAAA,EAAK;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEnB,CAAC;AAAAC,EAAA,GAJYN,IAAI;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}