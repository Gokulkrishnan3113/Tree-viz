{"ast":null,"code":"class TrieNode {\n  constructor() {\n    this.children = {};\n    this.isEndofword = false;\n  }\n}\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n  insert(word) {\n    let currentnode = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!currentnode.children[char]) {\n        currentnode.children[char] = new TrieNode();\n      }\n      currentnode = currentnode.children[char];\n    }\n    currentnode.isEndofword = true;\n  }\n  search(word) {\n    let currentnode = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!currentnode.children[char]) {\n        return false;\n      }\n      currentnode = currentnode.children[char];\n    }\n    return currentnode.isEndofword;\n  }\n}\nclass TrieRenderer {\n  constructor(trieInstance) {\n    this.onInsertTrieClick = async () => {\n      const element = await this.promptAsync('Enter word to insert into the trie');\n      if (!element) {\n        return;\n      }\n      this.insert(element);\n      this.renderTrie();\n    };\n    this.promptAsync = promptMessage => {\n      return new Promise(resolve => {\n        const userInput = prompt(promptMessage);\n        resolve(userInput);\n      });\n    };\n    this.renderTrie = () => {\n      const trieContainer = document.querySelector(this.trieContainerSelector);\n      if (!this.root) {\n        return trieContainer.innerHTML = '';\n      }\n      const template = this.getTrieUI(this.root);\n      trieContainer.innerHTML = template;\n    };\n    this.getTrieUI = (node, value = '') => {\n      const {\n        children\n      } = node;\n      if (!node) {\n        return '';\n      }\n      let childrenUI = '';\n      for (const char in children) {\n        if (children.hasOwnProperty(char)) {\n          childrenUI += this.getTrieUI(children[char], char);\n        }\n      }\n      return `\n            <div class=\"node__element\" data-node-id=\"${value}\">${value}</div>\n            ${childrenUI ? `\n                    <div class=\"node__bottom-line\"></div>\n                    <div class=\"node__children\">\n                        ${childrenUI}\n                    </div>\n                    ` : ''}\n        `;\n    };\n    this.trie = trieInstance;\n    this.actionsContainerSelector = '.rb-actions-container';\n    this.trieContainerSelector = '#trie-container';\n  }\n  template() {\n    return `\n        <div class=\"btn-group\">\n          <button id=\"insertrbnode\" class=\"btn btn-warning\">\n            Insert Node\n          </button>\n          <button id=\"removerbnode\" class=\"btn btn-dark\">\n            Remove Node\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button id=\"deleterbtree\" class=\"btn btn-danger\">\n            Delete Tree\n          </button>\n        </div>\n          <div class=\"btn-group\">\n            <button id=\"PreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\n              Hide Balance Tree Preview\n            </button>\n          </div>\n        `;\n  }\n  setTemplate() {\n    const actionsContainer = document.querySelector(this.actionsContainerSelector);\n    actionsContainer.innerHTML = this.template();\n  }\n  init() {\n    this.setTemplate();\n    const insert = document.querySelector('#insertrbnode');\n    const removeElementBtn = document.querySelector('#removerbnode');\n    const delBtn = document.querySelector('#deleterbtree');\n    // const toggleBalancePreviewBtn = document.querySelector('#PreviewBtn');\n    insert.addEventListener('click', this.onInsertTrieClick.bind(this));\n    // removeElementBtn.addEventListener('click', this.onRemoverbClick.bind(this));\n    // delBtn.addEventListener('click', this.onResetrbClick.bind(this));\n    // toggleBalancePreviewBtn.addEventListener('click', () => {this.resetBalancedTreeView();});\n  }\n}\nexport { Trie, TrieRenderer };","map":{"version":3,"names":["TrieNode","constructor","children","isEndofword","Trie","root","insert","word","currentnode","i","length","char","search","TrieRenderer","trieInstance","onInsertTrieClick","element","promptAsync","renderTrie","promptMessage","Promise","resolve","userInput","prompt","trieContainer","document","querySelector","trieContainerSelector","innerHTML","template","getTrieUI","node","value","childrenUI","hasOwnProperty","trie","actionsContainerSelector","setTemplate","actionsContainer","init","removeElementBtn","delBtn","addEventListener","bind"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/RB/rb-ui.js"],"sourcesContent":["class TrieNode {\n    constructor() {\n    this.children = {};\n    this.isEndofword = false;\n    }\n}\n\nclass Trie{\n    constructor() {\n        this.root=new TrieNode();\n        \n    }\n    insert(word)\n    {\n        let currentnode=this.root;\n        for(let i=0;i<word.length;i++)\n        {\n            const char=word[i];\n            if(!currentnode.children[char])\n            {\n                currentnode.children[char]=new TrieNode();\n            }\n            currentnode=currentnode.children[char];\n        }\n        currentnode.isEndofword=true;\n        \n    }\n    search(word)\n    {\n        let currentnode=this.root;\n        for(let i=0;i<word.length;i++)\n        {\n            const char=word[i];\n            if(!currentnode.children[char])\n            {\n                return false;\n            }\n            currentnode=currentnode.children[char];\n        }\n        return currentnode.isEndofword;\n\n    }\n}\n\nclass TrieRenderer {\n    constructor(trieInstance) {\n        this.trie = trieInstance;\n        this.actionsContainerSelector = '.rb-actions-container';\n        this.trieContainerSelector = '#trie-container';\n    }\n    template() {\n        return `\n        <div class=\"btn-group\">\n          <button id=\"insertrbnode\" class=\"btn btn-warning\">\n            Insert Node\n          </button>\n          <button id=\"removerbnode\" class=\"btn btn-dark\">\n            Remove Node\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button id=\"deleterbtree\" class=\"btn btn-danger\">\n            Delete Tree\n          </button>\n        </div>\n          <div class=\"btn-group\">\n            <button id=\"PreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\n              Hide Balance Tree Preview\n            </button>\n          </div>\n        `;\n      }\n      setTemplate() {\n        const actionsContainer = document.querySelector(\n          this.actionsContainerSelector\n        );\n        actionsContainer.innerHTML = this.template();\n      }\n\n      init() {\n        this.setTemplate();\n        const insert = document.querySelector('#insertrbnode');\n        const removeElementBtn = document.querySelector('#removerbnode');\n        const delBtn = document.querySelector('#deleterbtree');\n        // const toggleBalancePreviewBtn = document.querySelector('#PreviewBtn');\n        insert.addEventListener('click', this.onInsertTrieClick.bind(this));\n        // removeElementBtn.addEventListener('click', this.onRemoverbClick.bind(this));\n        // delBtn.addEventListener('click', this.onResetrbClick.bind(this));\n        // toggleBalancePreviewBtn.addEventListener('click', () => {this.resetBalancedTreeView();});\n      }\n\n    onInsertTrieClick = async () => {\n        const element = await this.promptAsync('Enter word to insert into the trie');\n        if (!element) {\n            return;\n        }\n\n        this.insert(element);\n        this.renderTrie();\n    };\n\n    promptAsync = (promptMessage) => {\n        return new Promise(resolve => {\n            const userInput = prompt(promptMessage);\n            resolve(userInput);\n        });\n    };\n\n    renderTrie = () => {\n        const trieContainer = document.querySelector(this.trieContainerSelector);\n        if (!this.root) {\n            return (trieContainer.innerHTML = '');\n        }\n        const template = this.getTrieUI(this.root);\n        trieContainer.innerHTML = template;\n    };\n\n    getTrieUI = (node, value = '') => {\n        const { children } = node;\n\n        if (!node) {\n            return '';\n        }\n\n        let childrenUI = '';\n        for (const char in children) {\n            if (children.hasOwnProperty(char)) {\n                childrenUI += this.getTrieUI(children[char], char);\n            }\n        }\n\n        return `\n            <div class=\"node__element\" data-node-id=\"${value}\">${value}</div>\n            ${\n                childrenUI\n                    ? `\n                    <div class=\"node__bottom-line\"></div>\n                    <div class=\"node__children\">\n                        ${childrenUI}\n                    </div>\n                    `\n                    : ''\n            }\n        `;\n    };\n}\n\nexport { Trie, TrieRenderer };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}