{"ast":null,"code":"class TrieNode {\n  constructor() {\n    this.children = {};\n    this.isEndofword = false;\n  }\n}\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n  insert(word) {\n    console.log(\"inside insert\" + word);\n    let currentnode = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!currentnode.children[char]) {\n        currentnode.children[char] = new TrieNode();\n      }\n      currentnode = currentnode.children[char];\n    }\n    currentnode.isEndofword = true;\n  }\n  search(word) {\n    let currentnode = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!currentnode.children[char]) {\n        return false;\n      }\n      currentnode = currentnode.children[char];\n    }\n    return currentnode.isEndofword;\n  }\n}\nclass TrieRenderer {\n  constructor(trieInstance) {\n    this.onInsertTrieClick = async () => {\n      const element = await this.promptAsync('Enter word to insert into the trie');\n      if (!element) {\n        return;\n      }\n      console.log(\"before call\" + element);\n      this.trie.insert(element);\n      this.renderTrie(this.trie.root);\n    };\n    this.promptAsync = promptMessage => {\n      return new Promise(resolve => {\n        const userInput = prompt(promptMessage);\n        resolve(userInput);\n      });\n    };\n    this.getTrieUI = (node, value = '') => {\n      const {\n        children\n      } = node;\n      if (!node) {\n        return '';\n      }\n      let childrenUI = '';\n      for (const char in children) {\n        if (children.hasOwnProperty(char)) {\n          const childNode = children[char];\n          childrenUI += this.getTrieUI(childNode, char);\n        }\n      }\n      return `\n            <div class=\"node__element\" data-node-id=\"${value}\">\n                ${value}\n            </div>\n            ${childrenUI ? `\n                    <div class=\"node__bottom-line\"></div>\n                    <div class=\"node__children\">\n                        <div class=\"node__horizontal-edge\"></div>\n                        ${childrenUI}\n                    </div>\n                    ` : ''}\n\n    `;\n    };\n    this.trie = trieInstance;\n    this.treeContainerSelector = '.tree';\n    this.actionsContainerSelector = '.rb-actions-container';\n    this.trieContainerSelector = '#trie-container';\n    this.root = trieInstance.root;\n  }\n  template() {\n    return `\n        <div class=\"btn-group\">\n          <button id=\"insertrbnode\" class=\"btn btn-warning\">\n            Insert Node\n          </button>\n          <button id=\"removerbnode\" class=\"btn btn-dark\">\n            Remove Node\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button id=\"deleterbtree\" class=\"btn btn-danger\">\n            Delete Tree\n          </button>\n        </div>\n          <div class=\"btn-group\">\n            <button id=\"PreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\n              Hide Balance Tree Preview\n            </button>\n          </div>\n        `;\n  }\n  setTemplate() {\n    const actionsContainer = document.querySelector(this.actionsContainerSelector);\n    actionsContainer.innerHTML = this.template();\n  }\n  init() {\n    this.setTemplate();\n    const insert = document.querySelector('#insertrbnode');\n    const removeElementBtn = document.querySelector('#removerbnode');\n    const delBtn = document.querySelector('#deleterbtree');\n    // const toggleBalancePreviewBtn = document.querySelector('#PreviewBtn');\n    insert.addEventListener('click', this.onInsertTrieClick.bind(this));\n    // removeElementBtn.addEventListener('click', this.onRemoverbClick.bind(this));\n    // delBtn.addEventListener('click', this.onResetrbClick.bind(this));\n    // toggleBalancePreviewBtn.addEventListener('click', () => {this.resetBalancedTreeView();});\n  }\n  renderTrie(node = this.trie.root, containerSelector = this.treeContainerSelector) {\n    const trieContainer = document.querySelector(containerSelector);\n    trieContainer.innerHTML = this.getTrieUI(node);\n\n    // Add line breaks based on common prefixes\n    const nodes = trieContainer.querySelectorAll('.node__element');\n    let previousParentId = null;\n    nodes.forEach(node => {\n      const parentId = node.getAttribute('data-parent-id');\n      if (parentId && parentId !== previousParentId) {\n        // Insert line break after each distinct parent node\n        const lineBreak = document.createElement('br');\n        node.insertAdjacentElement('beforebegin', lineBreak);\n        previousParentId = parentId;\n      }\n    });\n  }\n}\nexport { Trie, TrieRenderer };","map":{"version":3,"names":["TrieNode","constructor","children","isEndofword","Trie","root","insert","word","console","log","currentnode","i","length","char","search","TrieRenderer","trieInstance","onInsertTrieClick","element","promptAsync","trie","renderTrie","promptMessage","Promise","resolve","userInput","prompt","getTrieUI","node","value","childrenUI","hasOwnProperty","childNode","treeContainerSelector","actionsContainerSelector","trieContainerSelector","template","setTemplate","actionsContainer","document","querySelector","innerHTML","init","removeElementBtn","delBtn","addEventListener","bind","containerSelector","trieContainer","nodes","querySelectorAll","previousParentId","forEach","parentId","getAttribute","lineBreak","createElement","insertAdjacentElement"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/RB/rb-ui.js"],"sourcesContent":["class TrieNode {\n    constructor() {\n    this.children = {};\n    this.isEndofword = false;\n    }\n}\n\nclass Trie{\n    constructor() {\n        this.root=new TrieNode();\n        \n    }\n    insert(word)\n    {\n        console.log(\"inside insert\"+word);\n        let currentnode=this.root;\n        for(let i=0;i<word.length;i++)\n        {\n            const char=word[i];\n            if(!currentnode.children[char])\n            {\n                currentnode.children[char]=new TrieNode();\n            }\n            currentnode=currentnode.children[char];\n        }\n        currentnode.isEndofword=true;\n        \n    }\n    search(word)\n    {\n        let currentnode=this.root;\n        for(let i=0;i<word.length;i++)\n        {\n            const char=word[i];\n            if(!currentnode.children[char])\n            {\n                return false;\n            }\n            currentnode=currentnode.children[char];\n        }\n        return currentnode.isEndofword;\n\n    }\n}\n\nclass TrieRenderer {\n    constructor(trieInstance) {\n        this.trie = trieInstance;\n        this.treeContainerSelector = '.tree';\n        this.actionsContainerSelector = '.rb-actions-container';\n        this.trieContainerSelector = '#trie-container';\n        this.root = trieInstance.root;\n    }\n    template() {\n        return `\n        <div class=\"btn-group\">\n          <button id=\"insertrbnode\" class=\"btn btn-warning\">\n            Insert Node\n          </button>\n          <button id=\"removerbnode\" class=\"btn btn-dark\">\n            Remove Node\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button id=\"deleterbtree\" class=\"btn btn-danger\">\n            Delete Tree\n          </button>\n        </div>\n          <div class=\"btn-group\">\n            <button id=\"PreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\n              Hide Balance Tree Preview\n            </button>\n          </div>\n        `;\n      }\n      setTemplate() {\n        const actionsContainer = document.querySelector(\n          this.actionsContainerSelector\n        );\n        actionsContainer.innerHTML = this.template();\n      }\n\n      init() {\n        this.setTemplate();\n        const insert = document.querySelector('#insertrbnode');\n        const removeElementBtn = document.querySelector('#removerbnode');\n        const delBtn = document.querySelector('#deleterbtree');\n        // const toggleBalancePreviewBtn = document.querySelector('#PreviewBtn');\n        insert.addEventListener('click', this.onInsertTrieClick.bind(this));\n        // removeElementBtn.addEventListener('click', this.onRemoverbClick.bind(this));\n        // delBtn.addEventListener('click', this.onResetrbClick.bind(this));\n        // toggleBalancePreviewBtn.addEventListener('click', () => {this.resetBalancedTreeView();});\n      }\n\n    onInsertTrieClick = async () => {\n        const element = await this.promptAsync('Enter word to insert into the trie');\n        if (!element) {\n            return;\n        }\n        console.log(\"before call\"+element);\n        this.trie.insert(element);\n        this.renderTrie(this.trie.root);\n    };\n\n    promptAsync = (promptMessage) => {\n        return new Promise(resolve => {\n            const userInput = prompt(promptMessage);\n            resolve(userInput);\n        });\n    };\n\n    renderTrie(\n        node=this.trie.root,\n        containerSelector = this.treeContainerSelector)\n        {\n        const trieContainer = document.querySelector(containerSelector);\n        trieContainer.innerHTML = this.getTrieUI(node);\n    \n        // Add line breaks based on common prefixes\n        const nodes = trieContainer.querySelectorAll('.node__element');\n        let previousParentId = null;\n    \n        nodes.forEach((node) => {\n            const parentId = node.getAttribute('data-parent-id');\n    \n            if (parentId && parentId !== previousParentId) {\n                // Insert line break after each distinct parent node\n                const lineBreak = document.createElement('br');\n                node.insertAdjacentElement('beforebegin', lineBreak);\n                previousParentId = parentId;\n            }\n        });\n    };\n\ngetTrieUI = (node, value = '') => {\n    const { children } = node;\n\n    if (!node) {\n        return '';\n    }\n\n    let childrenUI = '';\n    for (const char in children) {\n        if (children.hasOwnProperty(char)) {\n            const childNode = children[char];\n            childrenUI += this.getTrieUI(childNode, char);\n        }\n    }\n\n    return `\n            <div class=\"node__element\" data-node-id=\"${value}\">\n                ${value}\n            </div>\n            ${\n                childrenUI\n                    ? `\n                    <div class=\"node__bottom-line\"></div>\n                    <div class=\"node__children\">\n                        <div class=\"node__horizontal-edge\"></div>\n                        ${childrenUI}\n                    </div>\n                    `\n                    : ''\n            }\n\n    `;\n};   \n}\nexport { Trie, TrieRenderer };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}