{"ast":null,"code":"export const defaultMaxHeapUIConfig = {\n  HIGHLIGHT_CLASS: 'node__element--highlight',\n  HIGHLIGHT_TIME: 300\n};\nclass MaxHeapUI {\n  constructor(heap, render, heapContainerSelector = '.heap', actionsContainerSelector = '.max-heap-actions-container', config = {\n    HIGHLIGHT_CLASS: 'node__element--highlight',\n    HIGHLIGHT_TIME: 800\n  }) {\n    this.highlightTimer = null;\n    this.heapContainerSelector = heapContainerSelector;\n    this.actionsContainerSelector = actionsContainerSelector;\n    this.config = config;\n    this.heap = heap;\n    this.render = render || this.renderHeap;\n    const root = document.documentElement;\n    root.style.setProperty('--animation-timing', `${this.config.HIGHLIGHT_TIME / 1000}s`);\n  }\n  template() {\n    return `\n      <div class=\"btn-group\">\n        <button id=\"heapinsert\" class=\"btn btn-warning\">\n          Insert Element\n        </button>\n        <button id=\"extractMaxBtn\" class=\"btn btn-dark\">\n          Extract Max\n        </button>\n      </div>\n      <div class=\"btn-group\">\n        <button id=\"peekBtn\" class=\"btn btn-primary\">Peek</button>\n      </div>\n      <div class=\"btn-group\">\n        <button id=\"resetBtn\" class=\"btn btn-danger\">\n          Delete Heap\n        </button>\n      </div>\n    `;\n  }\n  getHeapUI(index = 0) {\n    const {\n      items\n    } = this.heap;\n    if (index >= items.length) {\n      return ''; // Return empty string if index exceeds heap size\n    }\n    const currentValue = items[index];\n    const leftChildIndex = 2 * index + 1;\n    const rightChildIndex = 2 * index + 2;\n    const leftChildUI = this.getHeapUI(leftChildIndex);\n    const rightChildUI = this.getHeapUI(rightChildIndex);\n\n    // Create HTML for the current node and its children\n    // const nodeHTML = `\n    //   <div class=\"node__element heap-node\" data-index=\"${index}\">\n    //     ${currentValue}\n    //   </div>\n    //   ${\n    //       leftChildUI || rightChildUI \n    //       ?`\n    //         <div class=\"node__bottom-line\"></div>\n    //         <div class=\"node__children\">\n    //         <div class=\"node node--left heap-children\">` \n\n    //       : ''}\n\n    //   ${leftChildUI}\n    //   ${rightChildUI}\n    //   ${leftChildUI || rightChildUI ? '</div>' : ''}\n    // `;\n\n    // return nodeHTML;\n    return `\n    <div class=\"node__element\" heap-node=\"${value}\">${value}</div>\n    ${left || right ? `\n          <div class=\"node__bottom-line\"></div>\n          <div class=\"node__children\">\n          <div class=\"node node--left\">\n            ${left ? this.getTreeUI(left) : ''}\n          </div>\n          <div class=\"node node--right\">\n            ${right ? this.getTreeUI(right) : ''}\n          </div>\n          </div>\n        ` : ''}\n  `;\n  }\n  renderHeap(containerSelector = this.heapContainerSelector) {\n    const heapContainer = document.querySelector(containerSelector);\n    if (!heapContainer) return; // Exit if container is not found\n\n    // Render the heap recursively starting from the root\n    heapContainer.innerHTML = this.getHeapUI();\n  }\n  highlightNode(index) {\n    const nodeElement = document.querySelector(`[data-index=\"${index}\"]`);\n    if (this.highlightTimer !== null) {\n      clearTimeout(this.highlightTimer);\n      nodeElement.classList.remove(this.config.HIGHLIGHT_CLASS);\n      this.highlightTimer = null;\n      return;\n    }\n    nodeElement.classList.add(this.config.HIGHLIGHT_CLASS);\n    return new Promise(resolve => {\n      this.highlightTimer = setTimeout(() => {\n        nodeElement.classList.remove(this.config.HIGHLIGHT_CLASS);\n        this.highlightTimer = null;\n        resolve();\n      }, this.config.HIGHLIGHT_TIME);\n    });\n  }\n  onInsertClick() {\n    const element = prompt('Enter element to insert into the heap');\n    if (!element) {\n      return;\n    }\n    this.heap.insert(parseInt(element));\n    this.render();\n  }\n  onExtractMaxBtnClick() {\n    const max = this.heap.extractMax();\n    if (max !== null) {\n      this.render();\n    } else {\n      alert('Heap is empty');\n    }\n  }\n  onPeekBtnClick() {\n    const max = this.heap.peek();\n    if (max !== null) {\n      alert(`Max element: ${max}`);\n    } else {\n      alert('Heap is empty');\n    }\n  }\n  onResetBtnClick() {\n    this.heap.clear();\n    this.render();\n  }\n  setTemplate() {\n    const actionsContainer = document.querySelector(this.actionsContainerSelector);\n    actionsContainer.innerHTML = this.template();\n  }\n  init() {\n    this.setTemplate();\n    const insertbutton = document.querySelector('#heapinsert');\n    const extractMaxBtn = document.querySelector('#extractMaxBtn');\n    const peekBtn = document.querySelector('#peekBtn');\n    const resetBtn = document.querySelector('#resetBtn');\n    insertbutton.addEventListener('click', this.onInsertClick.bind(this));\n    extractMaxBtn.addEventListener('click', this.onExtractMaxBtnClick.bind(this));\n    peekBtn.addEventListener('click', this.onPeekBtnClick.bind(this));\n    resetBtn.addEventListener('click', this.onResetBtnClick.bind(this));\n  }\n}\nexport default MaxHeapUI;","map":{"version":3,"names":["defaultMaxHeapUIConfig","HIGHLIGHT_CLASS","HIGHLIGHT_TIME","MaxHeapUI","constructor","heap","render","heapContainerSelector","actionsContainerSelector","config","highlightTimer","renderHeap","root","document","documentElement","style","setProperty","template","getHeapUI","index","items","length","currentValue","leftChildIndex","rightChildIndex","leftChildUI","rightChildUI","value","left","right","getTreeUI","containerSelector","heapContainer","querySelector","innerHTML","highlightNode","nodeElement","clearTimeout","classList","remove","add","Promise","resolve","setTimeout","onInsertClick","element","prompt","insert","parseInt","onExtractMaxBtnClick","max","extractMax","alert","onPeekBtnClick","peek","onResetBtnClick","clear","setTemplate","actionsContainer","init","insertbutton","extractMaxBtn","peekBtn","resetBtn","addEventListener","bind"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/HEAP/maxheapui.js"],"sourcesContent":["export const defaultMaxHeapUIConfig = {\n  HIGHLIGHT_CLASS: 'node__element--highlight',\n  HIGHLIGHT_TIME: 300,\n};\n\nclass MaxHeapUI {\n  highlightTimer = null;\n  actionsContainerSelector;\n\n  constructor(\n    heap,\n    render,\n    heapContainerSelector = '.heap',\n    actionsContainerSelector = '.max-heap-actions-container',\n    config = {\n      HIGHLIGHT_CLASS: 'node__element--highlight',\n      HIGHLIGHT_TIME: 800,\n    }\n  ) {\n    this.heapContainerSelector = heapContainerSelector;\n    this.actionsContainerSelector = actionsContainerSelector;\n    this.config = config;\n    this.heap = heap;\n    this.render = render || this.renderHeap;\n    const root = document.documentElement;\n    root.style.setProperty(\n      '--animation-timing',\n      `${this.config.HIGHLIGHT_TIME / 1000}s`\n    );\n  }\n\n  template() {\n    return `\n      <div class=\"btn-group\">\n        <button id=\"heapinsert\" class=\"btn btn-warning\">\n          Insert Element\n        </button>\n        <button id=\"extractMaxBtn\" class=\"btn btn-dark\">\n          Extract Max\n        </button>\n      </div>\n      <div class=\"btn-group\">\n        <button id=\"peekBtn\" class=\"btn btn-primary\">Peek</button>\n      </div>\n      <div class=\"btn-group\">\n        <button id=\"resetBtn\" class=\"btn btn-danger\">\n          Delete Heap\n        </button>\n      </div>\n    `;\n  }\n\n  getHeapUI(index = 0) {\n    const { items } = this.heap;\n\n    if (index >= items.length) {\n      return ''; // Return empty string if index exceeds heap size\n    }\n\n    const currentValue = items[index];\n    const leftChildIndex = 2 * index + 1;\n    const rightChildIndex = 2 * index + 2;\n\n    const leftChildUI = this.getHeapUI(leftChildIndex);\n    const rightChildUI = this.getHeapUI(rightChildIndex);\n\n    // Create HTML for the current node and its children\n    // const nodeHTML = `\n    //   <div class=\"node__element heap-node\" data-index=\"${index}\">\n    //     ${currentValue}\n    //   </div>\n    //   ${\n    //       leftChildUI || rightChildUI \n    //       ?`\n    //         <div class=\"node__bottom-line\"></div>\n    //         <div class=\"node__children\">\n    //         <div class=\"node node--left heap-children\">` \n            \n    //       : ''}\n          \n    //   ${leftChildUI}\n    //   ${rightChildUI}\n    //   ${leftChildUI || rightChildUI ? '</div>' : ''}\n    // `;\n\n    // return nodeHTML;\n    return `\n    <div class=\"node__element\" heap-node=\"${value}\">${value}</div>\n    ${\n      left || right\n        ? `\n          <div class=\"node__bottom-line\"></div>\n          <div class=\"node__children\">\n          <div class=\"node node--left\">\n            ${left ? this.getTreeUI(left) : ''}\n          </div>\n          <div class=\"node node--right\">\n            ${right ? this.getTreeUI(right) : ''}\n          </div>\n          </div>\n        `\n        : ''\n    }\n  `;\n  }\n\n  renderHeap(containerSelector = this.heapContainerSelector) {\n    const heapContainer = document.querySelector(containerSelector);\n    if (!heapContainer) return; // Exit if container is not found\n\n    // Render the heap recursively starting from the root\n    heapContainer.innerHTML = this.getHeapUI();\n  }\n\n  highlightNode(index) {\n    const nodeElement = document.querySelector(`[data-index=\"${index}\"]`);\n\n    if (this.highlightTimer !== null) {\n      clearTimeout(this.highlightTimer);\n      nodeElement.classList.remove(this.config.HIGHLIGHT_CLASS);\n      this.highlightTimer = null;\n      return;\n    }\n\n    nodeElement.classList.add(this.config.HIGHLIGHT_CLASS);\n\n    return new Promise((resolve) => {\n      this.highlightTimer = setTimeout(() => {\n        nodeElement.classList.remove(this.config.HIGHLIGHT_CLASS);\n        this.highlightTimer = null;\n        resolve();\n      }, this.config.HIGHLIGHT_TIME);\n    });\n  }\n\n  onInsertClick() {\n    const element = prompt('Enter element to insert into the heap');\n    if (!element) {\n      return;\n    }\n    this.heap.insert(parseInt(element));\n    this.render();\n  }\n\n  onExtractMaxBtnClick() {\n    const max = this.heap.extractMax();\n    if (max !== null) {\n      this.render();\n    } else {\n      alert('Heap is empty');\n    }\n  }\n\n  onPeekBtnClick() {\n    const max = this.heap.peek();\n    if (max !== null) {\n      alert(`Max element: ${max}`);\n    } else {\n      alert('Heap is empty');\n    }\n  }\n\n  onResetBtnClick() {\n    this.heap.clear();\n    this.render();\n  }\n\n  setTemplate() {\n    const actionsContainer = document.querySelector(\n      this.actionsContainerSelector\n    );\n    actionsContainer.innerHTML = this.template();\n  }\n\n  init() {\n    this.setTemplate();\n    const insertbutton = document.querySelector('#heapinsert');\n    const extractMaxBtn = document.querySelector('#extractMaxBtn');\n    const peekBtn = document.querySelector('#peekBtn');\n    const resetBtn = document.querySelector('#resetBtn');\n\n    insertbutton.addEventListener('click', this.onInsertClick.bind(this));\n    extractMaxBtn.addEventListener(\n      'click',\n      this.onExtractMaxBtnClick.bind(this)\n    );\n    peekBtn.addEventListener('click', this.onPeekBtnClick.bind(this));\n    resetBtn.addEventListener('click', this.onResetBtnClick.bind(this));\n  }\n}\n\nexport default MaxHeapUI;\n"],"mappings":"AAAA,OAAO,MAAMA,sBAAsB,GAAG;EACpCC,eAAe,EAAE,0BAA0B;EAC3CC,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,SAAS,CAAC;EAIdC,WAAWA,CACTC,IAAI,EACJC,MAAM,EACNC,qBAAqB,GAAG,OAAO,EAC/BC,wBAAwB,GAAG,6BAA6B,EACxDC,MAAM,GAAG;IACPR,eAAe,EAAE,0BAA0B;IAC3CC,cAAc,EAAE;EAClB,CAAC,EACD;IAAA,KAZFQ,cAAc,GAAG,IAAI;IAanB,IAAI,CAACH,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACC,wBAAwB,GAAGA,wBAAwB;IACxD,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM,IAAI,IAAI,CAACK,UAAU;IACvC,MAAMC,IAAI,GAAGC,QAAQ,CAACC,eAAe;IACrCF,IAAI,CAACG,KAAK,CAACC,WAAW,CACpB,oBAAoB,EACnB,GAAE,IAAI,CAACP,MAAM,CAACP,cAAc,GAAG,IAAK,GACvC,CAAC;EACH;EAEAe,QAAQA,CAAA,EAAG;IACT,OAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACH;EAEAC,SAASA,CAACC,KAAK,GAAG,CAAC,EAAE;IACnB,MAAM;MAAEC;IAAM,CAAC,GAAG,IAAI,CAACf,IAAI;IAE3B,IAAIc,KAAK,IAAIC,KAAK,CAACC,MAAM,EAAE;MACzB,OAAO,EAAE,CAAC,CAAC;IACb;IAEA,MAAMC,YAAY,GAAGF,KAAK,CAACD,KAAK,CAAC;IACjC,MAAMI,cAAc,GAAG,CAAC,GAAGJ,KAAK,GAAG,CAAC;IACpC,MAAMK,eAAe,GAAG,CAAC,GAAGL,KAAK,GAAG,CAAC;IAErC,MAAMM,WAAW,GAAG,IAAI,CAACP,SAAS,CAACK,cAAc,CAAC;IAClD,MAAMG,YAAY,GAAG,IAAI,CAACR,SAAS,CAACM,eAAe,CAAC;;IAEpD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;;IAEA;IACA,OAAQ;AACZ,4CAA4CG,KAAM,KAAIA,KAAM;AAC5D,MACMC,IAAI,IAAIC,KAAK,GACR;AACX;AACA;AACA;AACA,cAAcD,IAAI,GAAG,IAAI,CAACE,SAAS,CAACF,IAAI,CAAC,GAAG,EAAG;AAC/C;AACA;AACA,cAAcC,KAAK,GAAG,IAAI,CAACC,SAAS,CAACD,KAAK,CAAC,GAAG,EAAG;AACjD;AACA;AACA,SAAS,GACC,EACL;AACL,GAAG;EACD;EAEAlB,UAAUA,CAACoB,iBAAiB,GAAG,IAAI,CAACxB,qBAAqB,EAAE;IACzD,MAAMyB,aAAa,GAAGnB,QAAQ,CAACoB,aAAa,CAACF,iBAAiB,CAAC;IAC/D,IAAI,CAACC,aAAa,EAAE,OAAO,CAAC;;IAE5B;IACAA,aAAa,CAACE,SAAS,GAAG,IAAI,CAAChB,SAAS,CAAC,CAAC;EAC5C;EAEAiB,aAAaA,CAAChB,KAAK,EAAE;IACnB,MAAMiB,WAAW,GAAGvB,QAAQ,CAACoB,aAAa,CAAE,gBAAed,KAAM,IAAG,CAAC;IAErE,IAAI,IAAI,CAACT,cAAc,KAAK,IAAI,EAAE;MAChC2B,YAAY,CAAC,IAAI,CAAC3B,cAAc,CAAC;MACjC0B,WAAW,CAACE,SAAS,CAACC,MAAM,CAAC,IAAI,CAAC9B,MAAM,CAACR,eAAe,CAAC;MACzD,IAAI,CAACS,cAAc,GAAG,IAAI;MAC1B;IACF;IAEA0B,WAAW,CAACE,SAAS,CAACE,GAAG,CAAC,IAAI,CAAC/B,MAAM,CAACR,eAAe,CAAC;IAEtD,OAAO,IAAIwC,OAAO,CAAEC,OAAO,IAAK;MAC9B,IAAI,CAAChC,cAAc,GAAGiC,UAAU,CAAC,MAAM;QACrCP,WAAW,CAACE,SAAS,CAACC,MAAM,CAAC,IAAI,CAAC9B,MAAM,CAACR,eAAe,CAAC;QACzD,IAAI,CAACS,cAAc,GAAG,IAAI;QAC1BgC,OAAO,CAAC,CAAC;MACX,CAAC,EAAE,IAAI,CAACjC,MAAM,CAACP,cAAc,CAAC;IAChC,CAAC,CAAC;EACJ;EAEA0C,aAAaA,CAAA,EAAG;IACd,MAAMC,OAAO,GAAGC,MAAM,CAAC,uCAAuC,CAAC;IAC/D,IAAI,CAACD,OAAO,EAAE;MACZ;IACF;IACA,IAAI,CAACxC,IAAI,CAAC0C,MAAM,CAACC,QAAQ,CAACH,OAAO,CAAC,CAAC;IACnC,IAAI,CAACvC,MAAM,CAAC,CAAC;EACf;EAEA2C,oBAAoBA,CAAA,EAAG;IACrB,MAAMC,GAAG,GAAG,IAAI,CAAC7C,IAAI,CAAC8C,UAAU,CAAC,CAAC;IAClC,IAAID,GAAG,KAAK,IAAI,EAAE;MAChB,IAAI,CAAC5C,MAAM,CAAC,CAAC;IACf,CAAC,MAAM;MACL8C,KAAK,CAAC,eAAe,CAAC;IACxB;EACF;EAEAC,cAAcA,CAAA,EAAG;IACf,MAAMH,GAAG,GAAG,IAAI,CAAC7C,IAAI,CAACiD,IAAI,CAAC,CAAC;IAC5B,IAAIJ,GAAG,KAAK,IAAI,EAAE;MAChBE,KAAK,CAAE,gBAAeF,GAAI,EAAC,CAAC;IAC9B,CAAC,MAAM;MACLE,KAAK,CAAC,eAAe,CAAC;IACxB;EACF;EAEAG,eAAeA,CAAA,EAAG;IAChB,IAAI,CAAClD,IAAI,CAACmD,KAAK,CAAC,CAAC;IACjB,IAAI,CAAClD,MAAM,CAAC,CAAC;EACf;EAEAmD,WAAWA,CAAA,EAAG;IACZ,MAAMC,gBAAgB,GAAG7C,QAAQ,CAACoB,aAAa,CAC7C,IAAI,CAACzB,wBACP,CAAC;IACDkD,gBAAgB,CAACxB,SAAS,GAAG,IAAI,CAACjB,QAAQ,CAAC,CAAC;EAC9C;EAEA0C,IAAIA,CAAA,EAAG;IACL,IAAI,CAACF,WAAW,CAAC,CAAC;IAClB,MAAMG,YAAY,GAAG/C,QAAQ,CAACoB,aAAa,CAAC,aAAa,CAAC;IAC1D,MAAM4B,aAAa,GAAGhD,QAAQ,CAACoB,aAAa,CAAC,gBAAgB,CAAC;IAC9D,MAAM6B,OAAO,GAAGjD,QAAQ,CAACoB,aAAa,CAAC,UAAU,CAAC;IAClD,MAAM8B,QAAQ,GAAGlD,QAAQ,CAACoB,aAAa,CAAC,WAAW,CAAC;IAEpD2B,YAAY,CAACI,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACpB,aAAa,CAACqB,IAAI,CAAC,IAAI,CAAC,CAAC;IACrEJ,aAAa,CAACG,gBAAgB,CAC5B,OAAO,EACP,IAAI,CAACf,oBAAoB,CAACgB,IAAI,CAAC,IAAI,CACrC,CAAC;IACDH,OAAO,CAACE,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACX,cAAc,CAACY,IAAI,CAAC,IAAI,CAAC,CAAC;IACjEF,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACT,eAAe,CAACU,IAAI,CAAC,IAAI,CAAC,CAAC;EACrE;AACF;AAEA,eAAe9D,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}