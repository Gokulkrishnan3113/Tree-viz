{"ast":null,"code":"class Node {\n  constructor(data) {\n    this.data = data;\n    this.parent = null;\n    this.leftChild = null;\n    this.rightChild = null;\n    this.color = 'RED'; // Initial color is red\n  }\n  isLeftChild() {\n    return this.parent !== null && this.parent.leftChild === this;\n  }\n  flipColor() {\n    this.color = this.color === 'RED' ? 'BLACK' : 'RED';\n  }\n}\nclass RedBlackTree {\n  constructor() {\n    this.root = null;\n    this.BLACK = 'BLACK';\n    this.RED = 'RED';\n  }\n  rbinsert(data) {\n    const node = new Node(data);\n    this.root = this._insert(this.root, node);\n    this._recolorAndRotate(node);\n    return this;\n  }\n  _insert(node, nodeToInsert) {\n    if (node === null) {\n      return nodeToInsert;\n    }\n    if (nodeToInsert.data < node.data) {\n      node.leftChild = this._insert(node.leftChild, nodeToInsert);\n      node.leftChild.parent = node;\n    } else if (nodeToInsert.data > node.data) {\n      node.rightChild = this._insert(node.rightChild, nodeToInsert);\n      node.rightChild.parent = node;\n    }\n    return node;\n  }\n  _recolorAndRotate(node) {\n    const parent = node.parent;\n    if (node !== this.root && parent.color === this.RED) {\n      const grandParent = node.parent.parent;\n      const uncle = parent.isLeftChild() ? grandParent.rightChild : grandParent.leftChild;\n      if (uncle !== null && uncle.color === this.RED) {\n        this._handleRecoloring(parent, uncle, grandParent);\n      } else if (parent.isLeftChild()) {\n        this._handleLeftSituations(node, parent, grandParent);\n      } else if (!parent.isLeftChild()) {\n        this._handleRightSituations(node, parent, grandParent);\n      }\n    }\n    this.root.color = this.BLACK;\n  }\n  _handleRightSituations(node, parent, grandParent) {\n    if (node.isLeftChild()) {\n      this._rotateRight(parent);\n    }\n    parent.flipColor();\n    grandParent.flipColor();\n    this._rotateLeft(grandParent);\n    this._recolorAndRotate(node.isLeftChild() ? grandParent : parent);\n  }\n  _handleLeftSituations(node, parent, grandParent) {\n    if (!node.isLeftChild()) {\n      this._rotateLeft(parent);\n    }\n    parent.flipColor();\n    grandParent.flipColor();\n    this._rotateRight(grandParent);\n    this._recolorAndRotate(node.isLeftChild() ? parent : grandParent);\n  }\n  _handleRecoloring(parent, uncle, grandParent) {\n    uncle.flipColor();\n    parent.flipColor();\n    grandParent.flipColor();\n    this._recolorAndRotate(grandParent);\n  }\n  _rotateRight(node) {\n    const leftNode = node.leftChild;\n    node.leftChild = leftNode.rightChild;\n    if (node.leftChild !== null) {\n      node.leftChild.parent = node;\n    }\n    leftNode.rightChild = node;\n    leftNode.parent = node.parent;\n    this._updateChildrenOfParentNode(node, leftNode);\n    node.parent = leftNode;\n  }\n  _rotateLeft(node) {\n    const rightNode = node.rightChild;\n    node.rightChild = rightNode.leftChild;\n    if (node.rightChild !== null) {\n      node.rightChild.parent = node;\n    }\n    rightNode.leftChild = node;\n    rightNode.parent = node.parent;\n    this._updateChildrenOfParentNode(node, rightNode);\n    node.parent = rightNode;\n  }\n  _updateChildrenOfParentNode(node, tempNode) {\n    if (node.parent === null) {\n      this.root = tempNode;\n    } else if (node.isLeftChild()) {\n      node.parent.leftChild = tempNode;\n    } else {\n      node.parent.rightChild = tempNode;\n    }\n  }\n  traverse() {\n    this._traverseInOrder(this.root);\n  }\n  _traverseInOrder(node) {\n    if (node !== null) {\n      this._traverseInOrder(node.leftChild);\n      console.log(node);\n      this._traverseInOrder(node.rightChild);\n    }\n  }\n  getMax() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    return this._getMax(this.root);\n  }\n  _getMax(node) {\n    if (node.rightChild !== null) {\n      return this._getMax(node.rightChild);\n    }\n    return node.data;\n  }\n  getMin() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    return this._getMin(this.root);\n  }\n  _getMin(node) {\n    if (node.leftChild !== null) {\n      return this._getMin(node.leftChild);\n    }\n    return node.data;\n  }\n  isEmpty() {\n    return this.root === null;\n  }\n}","map":{"version":3,"names":["Node","constructor","data","parent","leftChild","rightChild","color","isLeftChild","flipColor","RedBlackTree","root","BLACK","RED","rbinsert","node","_insert","_recolorAndRotate","nodeToInsert","grandParent","uncle","_handleRecoloring","_handleLeftSituations","_handleRightSituations","_rotateRight","_rotateLeft","leftNode","_updateChildrenOfParentNode","rightNode","tempNode","traverse","_traverseInOrder","console","log","getMax","isEmpty","_getMax","getMin","_getMin"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/RB/rb.js"],"sourcesContent":["class Node {\n  constructor(data) {\n      this.data = data;\n      this.parent = null;\n      this.leftChild = null;\n      this.rightChild = null;\n      this.color = 'RED'; // Initial color is red\n  }\n\n  isLeftChild() {\n      return this.parent !== null && this.parent.leftChild === this;\n  }\n\n  flipColor() {\n      this.color = this.color === 'RED' ? 'BLACK' : 'RED';\n  }\n}\n\nclass RedBlackTree {\n  constructor() {\n      this.root = null;\n      this.BLACK = 'BLACK';\n      this.RED = 'RED';\n  }\n\n  rbinsert(data) {\n      const node = new Node(data);\n      this.root = this._insert(this.root, node);\n      this._recolorAndRotate(node);\n      return this;\n  }\n\n  _insert(node, nodeToInsert) {\n      if (node === null) {\n          return nodeToInsert;\n      }\n\n      if (nodeToInsert.data < node.data) {\n          node.leftChild = this._insert(node.leftChild, nodeToInsert);\n          node.leftChild.parent = node;\n      } else if (nodeToInsert.data > node.data) {\n          node.rightChild = this._insert(node.rightChild, nodeToInsert);\n          node.rightChild.parent = node;\n      }\n\n      return node;\n  }\n\n  _recolorAndRotate(node) {\n      const parent = node.parent;\n\n      if (node !== this.root && parent.color === this.RED) {\n          const grandParent = node.parent.parent;\n          const uncle = parent.isLeftChild()\n              ? grandParent.rightChild\n              : grandParent.leftChild;\n\n          if (uncle !== null && uncle.color === this.RED) {\n              this._handleRecoloring(parent, uncle, grandParent);\n          } else if (parent.isLeftChild()) {\n              this._handleLeftSituations(node, parent, grandParent);\n          } else if (!parent.isLeftChild()) {\n              this._handleRightSituations(node, parent, grandParent);\n          }\n      }\n      this.root.color = this.BLACK;\n  }\n\n  _handleRightSituations(node, parent, grandParent) {\n      if (node.isLeftChild()) {\n          this._rotateRight(parent);\n      }\n      parent.flipColor();\n      grandParent.flipColor();\n      this._rotateLeft(grandParent);\n      this._recolorAndRotate(node.isLeftChild() ? grandParent : parent);\n  }\n\n  _handleLeftSituations(node, parent, grandParent) {\n      if (!node.isLeftChild()) {\n          this._rotateLeft(parent);\n      }\n      parent.flipColor();\n      grandParent.flipColor();\n      this._rotateRight(grandParent);\n      this._recolorAndRotate(node.isLeftChild() ? parent : grandParent);\n  }\n\n  _handleRecoloring(parent, uncle, grandParent) {\n      uncle.flipColor();\n      parent.flipColor();\n      grandParent.flipColor();\n      this._recolorAndRotate(grandParent);\n  }\n\n  _rotateRight(node) {\n      const leftNode = node.leftChild;\n      node.leftChild = leftNode.rightChild;\n\n      if (node.leftChild !== null) {\n          node.leftChild.parent = node;\n      }\n\n      leftNode.rightChild = node;\n      leftNode.parent = node.parent;\n      this._updateChildrenOfParentNode(node, leftNode);\n      node.parent = leftNode;\n  }\n\n  _rotateLeft(node) {\n      const rightNode = node.rightChild;\n      node.rightChild = rightNode.leftChild;\n\n      if (node.rightChild !== null) {\n          node.rightChild.parent = node;\n      }\n\n      rightNode.leftChild = node;\n      rightNode.parent = node.parent;\n      this._updateChildrenOfParentNode(node, rightNode);\n      node.parent = rightNode;\n  }\n\n  _updateChildrenOfParentNode(node, tempNode) {\n      if (node.parent === null) {\n          this.root = tempNode;\n      } else if (node.isLeftChild()) {\n          node.parent.leftChild = tempNode;\n      } else {\n          node.parent.rightChild = tempNode;\n      }\n  }\n\n  traverse() {\n      this._traverseInOrder(this.root);\n  }\n\n  _traverseInOrder(node) {\n      if (node !== null) {\n          this._traverseInOrder(node.leftChild);\n          console.log(node);\n          this._traverseInOrder(node.rightChild);\n      }\n  }\n\n  getMax() {\n      if (this.isEmpty()) {\n          return null;\n      }\n      return this._getMax(this.root);\n  }\n\n  _getMax(node) {\n      if (node.rightChild !== null) {\n          return this._getMax(node.rightChild);\n      }\n      return node.data;\n  }\n\n  getMin() {\n      if (this.isEmpty()) {\n          return null;\n      }\n      return this._getMin(this.root);\n  }\n\n  _getMin(node) {\n      if (node.leftChild !== null) {\n          return this._getMin(node.leftChild);\n      }\n      return node.data;\n  }\n\n  isEmpty() {\n      return this.root === null;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}