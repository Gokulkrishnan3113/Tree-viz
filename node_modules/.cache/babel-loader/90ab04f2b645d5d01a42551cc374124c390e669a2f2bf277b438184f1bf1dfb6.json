{"ast":null,"code":"import BinarySearchTree from '../BST/js_binary_search_tree';\nimport BinarySearchTreeUI from '../BST/bst-ui';\nimport _ from 'lodash';\nconst colors = ['#D6FFB7', '#F5FF90', '#FFC15E', '#FF9F1C', '#2AFC98'];\nexport default class AVLTreeUI extends BinarySearchTreeUI {\n  constructor() {\n    super(...arguments);\n    this.balancePreviewVisible = true;\n    this.treeContainerSelector = '.avl-tree';\n    this.actionsContainerSelector = '.avl-actions-container';\n  }\n  highlightNode({\n    value\n  }) {\n    const nodeElement = document.querySelector(`[data-node-id=\"${value}\"]`);\n    if (this.highlightTimer !== null) {\n      clearTimeout(this.highlightTimer);\n      nodeElement.classList.remove(this.config.HIGHLIGHT_CLASS);\n      this.highlightTimer = null;\n      return;\n    }\n    nodeElement.classList.add(this.config.HIGHLIGHT_CLASS);\n    document.querySelectorAll('button').forEach(btn => {\n      btn.setAttribute('disabled', true);\n    });\n    return new Promise(resolve => {\n      this.highlightTimer = setTimeout(() => {\n        nodeElement.classList.remove(this.config.HIGHLIGHT_CLASS);\n        document.querySelectorAll('button').forEach(btn => {\n          btn.removeAttribute('disabled');\n        });\n        this.highlightTimer = null;\n        resolve();\n      }, this.config.HIGHLIGHT_TIME);\n    });\n  }\n  resetBalancedTreeView() {\n    if (!this.balancedTree) {\n      return;\n    }\n    const toggleBalancePreviewBtn = document.querySelector('#switchPreviewBtn');\n    this.tree = _.clone(this.balancedTree);\n    this.balancedTree = null;\n    this.hideBalancePreview();\n    this.render(this.tree.root);\n    toggleBalancePreviewBtn.setAttribute('hidden', true);\n    document.querySelectorAll('button').forEach(btn => {\n      btn.removeAttribute('disabled');\n    });\n  }\n  init() {\n    this.setTemplate();\n    const insert = document.querySelector('#insertavlnode');\n    const removeElementBtn = document.querySelector('#removeavlnode');\n    const delBtn = document.querySelector('#deletetree');\n    const toggleBalancePreviewBtn = document.querySelector('#switchPreviewBtn');\n    insert.addEventListener('click', this.onInsertBtnClick.bind(this));\n    removeElementBtn.addEventListener('click', this.onRemoveElementBtnClick.bind(this));\n    delBtn.addEventListener('click', this.onResetBtnClick.bind(this));\n    toggleBalancePreviewBtn.addEventListener('click', () => {\n      this.resetBalancedTreeView();\n    });\n  }\n  template() {\n    return `\n    <div class=\"btn-group\">\n      <button id=\"insertavlnode\" class=\"btn btn-warning\">\n        Insert Node\n      </button>\n      <button id=\"removeavlnode\" class=\"btn btn-dark\">\n        Remove Node\n      </button>\n    </div>\n    <div class=\"btn-group\">\n      <button id=\"deletetree\" class=\"btn btn-danger\">\n        Delete Tree\n      </button>\n    </div>\n      <div class=\"btn-group\">\n        <button id=\"switchPreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\n          Hide Balance Tree Preview\n        </button>\n      </div>\n    `;\n  }\n  onInsertBtnClick() {\n    const element = prompt('Enter element to insert into the tree');\n    if (!element) {\n      return;\n    }\n    if (this.tree.search(element)) {\n      alert('Element already exists in the tree.');\n      return;\n    }\n    const bst = new BinarySearchTree();\n    bst.root = _.cloneDeep(this.tree).root;\n    const insertedEl = this.tree.insert(element);\n    if (this.balancePreviewVisible) {\n      this.balancedTree = _.cloneDeep(this.tree);\n    }\n    if (insertedEl) {\n      if (!this.balancePreviewVisible) {\n        this.render(this.tree.root);\n        this.hideBalancePreview();\n        this.highlightNode(insertedEl);\n      } else {\n        bst.insert(element);\n        this.render(bst.root);\n        this.showBalancePreview(this.balancedTree, bst);\n      }\n    }\n  }\n  onRemoveElementBtnClick() {\n    const element = prompt('Enter element to remove from the tree');\n    if (!element) {\n      return;\n    }\n\n    // Check if the element exists in the tree\n    const elementExists = this.tree.search(element);\n    if (!elementExists) {\n      alert('Element not found');\n      return;\n    }\n    let removedEl;\n    if (this.balancePreviewVisible) {\n      this.balancedTree = _.cloneDeep(this.tree);\n      removedEl = this.balancedTree.remove(element);\n    } else {\n      removedEl = this.tree.remove(element);\n      this.balancedTree = null;\n    }\n    if (removedEl) {\n      this.highlightNode(removedEl).then(() => {\n        if (!this.balancePreviewVisible) {\n          this.render(this.tree.root);\n          this.hideBalancePreview();\n        } else {\n          this.showBalancePreview(this.balancedTree);\n        }\n      });\n    }\n  }\n  hideBalancePreview() {\n    const selector = '.avl-tree-clone';\n    const treeContainer = document.querySelector(selector);\n    treeContainer.innerHTML = '';\n  }\n  disableAllBtnsExceptPreview() {\n    const allButtons = document.querySelectorAll('button');\n    allButtons.forEach(btn => {\n      if (btn.getAttribute('id') === 'switchPreviewBtn') {\n        btn.removeAttribute('hidden');\n      } else {\n        btn.setAttribute('disabled', true);\n      }\n    });\n  }\n  showBalancePreview(clone, tree = this.tree) {\n    this.disableAllBtnsExceptPreview();\n    const selector = '.avl-tree-clone';\n    const treeContainer = document.querySelector(selector);\n    this.renderTree(clone.root, selector);\n    treeContainer.innerHTML = `<div style=\"margin-bottom:30px;\">Balanced Tree</div>${treeContainer.innerHTML}`;\n    const cloneTree = clone.inOrderTraverse();\n    const colorsHash = {};\n    let index = 0;\n    for (const current of cloneTree) {\n      const match = tree.search(current.value);\n      if (!match) {\n        continue;\n      }\n      if (match.left !== current.left || match.right !== current.right) {\n        colorsHash[current.value] = colors[index];\n        index++;\n      }\n    }\n    for (const key in colorsHash) {\n      const elements = document.querySelectorAll(`[data-node-id=\"${key}\"]`);\n      elements.forEach(el => {\n        el.style.backgroundColor = colorsHash[key];\n      });\n    }\n  }\n  onResetBtnClick() {\n    this.highlightNode(this.tree.root).then(() => {\n      this.tree.root = null;\n      this.render(this.tree.root);\n    });\n  }\n}","map":{"version":3,"names":["BinarySearchTree","BinarySearchTreeUI","_","colors","AVLTreeUI","constructor","arguments","balancePreviewVisible","treeContainerSelector","actionsContainerSelector","highlightNode","value","nodeElement","document","querySelector","highlightTimer","clearTimeout","classList","remove","config","HIGHLIGHT_CLASS","add","querySelectorAll","forEach","btn","setAttribute","Promise","resolve","setTimeout","removeAttribute","HIGHLIGHT_TIME","resetBalancedTreeView","balancedTree","toggleBalancePreviewBtn","tree","clone","hideBalancePreview","render","root","init","setTemplate","insert","removeElementBtn","delBtn","addEventListener","onInsertBtnClick","bind","onRemoveElementBtnClick","onResetBtnClick","template","element","prompt","search","alert","bst","cloneDeep","insertedEl","showBalancePreview","elementExists","removedEl","then","selector","treeContainer","innerHTML","disableAllBtnsExceptPreview","allButtons","getAttribute","renderTree","cloneTree","inOrderTraverse","colorsHash","index","current","match","left","right","key","elements","el","style","backgroundColor"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/AVL/avl_tree_ui.js"],"sourcesContent":["import BinarySearchTree from '../BST/js_binary_search_tree';\r\nimport BinarySearchTreeUI from '../BST/bst-ui';\r\nimport _ from 'lodash';\r\n\r\n\r\nconst colors = ['#D6FFB7', '#F5FF90', '#FFC15E', '#FF9F1C', '#2AFC98'];\r\n\r\nexport default class AVLTreeUI extends BinarySearchTreeUI {\r\n  balancePreviewVisible = true;\r\n  balancedTree;\r\n  constructor() {\r\n    super(...arguments);\r\n    this.treeContainerSelector = '.avl-tree';\r\n    this.actionsContainerSelector = '.avl-actions-container';\r\n  }\r\n  highlightNode({ value }) {\r\n    const nodeElement = document.querySelector(`[data-node-id=\"${value}\"]`);\r\n    if (this.highlightTimer !== null) {\r\n      clearTimeout(this.highlightTimer);\r\n      nodeElement.classList.remove(this.config.HIGHLIGHT_CLASS);\r\n      this.highlightTimer = null;\r\n      return;\r\n    }\r\n    nodeElement.classList.add(this.config.HIGHLIGHT_CLASS);\r\n    document.querySelectorAll('button').forEach((btn) => {\r\n      btn.setAttribute('disabled', true);\r\n    });\r\n    return new Promise((resolve) => {\r\n      this.highlightTimer = setTimeout(() => {\r\n        nodeElement.classList.remove(this.config.HIGHLIGHT_CLASS);\r\n        document.querySelectorAll('button').forEach((btn) => {\r\n          btn.removeAttribute('disabled');\r\n        });\r\n        this.highlightTimer = null;\r\n        resolve();\r\n      }, this.config.HIGHLIGHT_TIME);\r\n    });\r\n  }\r\n\r\n  resetBalancedTreeView() {\r\n    if (!this.balancedTree) {\r\n      return;\r\n    }\r\n    const toggleBalancePreviewBtn = document.querySelector('#switchPreviewBtn');\r\n    this.tree = _.clone(this.balancedTree);\r\n    this.balancedTree = null;\r\n    this.hideBalancePreview();\r\n    this.render(this.tree.root);\r\n    toggleBalancePreviewBtn.setAttribute('hidden', true);\r\n    document.querySelectorAll('button').forEach((btn) => {\r\n      btn.removeAttribute('disabled');\r\n    });\r\n  }\r\n\r\n  init() {\r\n    this.setTemplate();\r\n    const insert = document.querySelector('#insertavlnode');\r\n    const removeElementBtn = document.querySelector('#removeavlnode');\r\n    const delBtn = document.querySelector('#deletetree');\r\n    const toggleBalancePreviewBtn = document.querySelector('#switchPreviewBtn');\r\n    insert.addEventListener('click', this.onInsertBtnClick.bind(this));\r\n    removeElementBtn.addEventListener('click', this.onRemoveElementBtnClick.bind(this));\r\n    delBtn.addEventListener('click', this.onResetBtnClick.bind(this));\r\n    toggleBalancePreviewBtn.addEventListener('click', () => {\r\n      this.resetBalancedTreeView();\r\n    });\r\n  }\r\n\r\n  template() {\r\n    return `\r\n    <div class=\"btn-group\">\r\n      <button id=\"insertavlnode\" class=\"btn btn-warning\">\r\n        Insert Node\r\n      </button>\r\n      <button id=\"removeavlnode\" class=\"btn btn-dark\">\r\n        Remove Node\r\n      </button>\r\n    </div>\r\n    <div class=\"btn-group\">\r\n      <button id=\"deletetree\" class=\"btn btn-danger\">\r\n        Delete Tree\r\n      </button>\r\n    </div>\r\n      <div class=\"btn-group\">\r\n        <button id=\"switchPreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\r\n          Hide Balance Tree Preview\r\n        </button>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  onInsertBtnClick() {\r\n    const element = prompt('Enter element to insert into the tree');\r\n    if (!element) {\r\n      return;\r\n    }\r\n    if (this.tree.search(element)) {\r\n      alert('Element already exists in the tree.');\r\n      return;\r\n    }\r\n  \r\n    const bst = new BinarySearchTree();\r\n    bst.root = _.cloneDeep(this.tree).root;\r\n    const insertedEl = this.tree.insert(element);\r\n    if (this.balancePreviewVisible) {\r\n      this.balancedTree = _.cloneDeep(this.tree);\r\n    }\r\n  \r\n    if (insertedEl) {\r\n      if (!this.balancePreviewVisible) {\r\n        this.render(this.tree.root);\r\n        this.hideBalancePreview();\r\n        this.highlightNode(insertedEl);\r\n      } else {\r\n        bst.insert(element);\r\n        this.render(bst.root);\r\n        this.showBalancePreview(this.balancedTree, bst);\r\n      }\r\n    } \r\n  }\r\n  \r\n\r\n  onRemoveElementBtnClick() {\r\n    const element = prompt('Enter element to remove from the tree');\r\n    if (!element) {\r\n      return;\r\n    }\r\n  \r\n    // Check if the element exists in the tree\r\n    const elementExists = this.tree.search(element);\r\n  \r\n    if (!elementExists) {\r\n      alert('Element not found');\r\n      return;\r\n    }\r\n  \r\n    let removedEl;\r\n    if (this.balancePreviewVisible) {\r\n      this.balancedTree = _.cloneDeep(this.tree);\r\n      removedEl = this.balancedTree.remove(element);\r\n    } else {\r\n      removedEl = this.tree.remove(element);\r\n      this.balancedTree = null;\r\n    }\r\n  \r\n    if (removedEl) {\r\n      this.highlightNode(removedEl).then(() => {\r\n        if (!this.balancePreviewVisible) {\r\n          this.render(this.tree.root);\r\n          this.hideBalancePreview();\r\n        } else {\r\n          this.showBalancePreview(this.balancedTree);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n\r\n  hideBalancePreview() {\r\n    const selector = '.avl-tree-clone';\r\n    const treeContainer = document.querySelector(selector);\r\n    treeContainer.innerHTML = '';\r\n  }\r\n\r\n  disableAllBtnsExceptPreview() {\r\n    const allButtons = document.querySelectorAll('button');\r\n    allButtons.forEach((btn) => {\r\n      if (btn.getAttribute('id') === 'switchPreviewBtn') {\r\n        btn.removeAttribute('hidden');\r\n      } else {\r\n        btn.setAttribute('disabled', true);\r\n      }\r\n    });\r\n  }\r\n\r\n  showBalancePreview(clone, tree = this.tree) {\r\n    this.disableAllBtnsExceptPreview();\r\n    const selector = '.avl-tree-clone';\r\n    const treeContainer = document.querySelector(selector);\r\n    this.renderTree(clone.root, selector);\r\n    treeContainer.innerHTML = `<div style=\"margin-bottom:30px;\">Balanced Tree</div>${treeContainer.innerHTML}`;\r\n    const cloneTree = clone.inOrderTraverse();\r\n    const colorsHash = {};\r\n    let index = 0;\r\n    for (const current of cloneTree) {\r\n      const match = tree.search(current.value);\r\n      if (!match) {\r\n        continue;\r\n      }\r\n      if (match.left !== current.left || match.right !== current.right) {\r\n        colorsHash[current.value] = colors[index];\r\n        index++;\r\n      }\r\n    }\r\n    for (const key in colorsHash) {\r\n      const elements = document.querySelectorAll(`[data-node-id=\"${key}\"]`);\r\n      elements.forEach((el) => {\r\n        el.style.backgroundColor = colorsHash[key];\r\n      });\r\n    }\r\n  }\r\n  onResetBtnClick() {\r\n    this.highlightNode(this.tree.root).then(() => {\r\n      this.tree.root = null;\r\n      this.render(this.tree.root);\r\n    });\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}