{"ast":null,"code":"const COMPARISON = {\n  EQUAL: 0,\n  SMALLER: -1,\n  GREATER: 1\n};\nconst defaultCompareNumberFn = (a, b) => {\n  if (Number(a) === Number(b)) {\n    return COMPARISON.EQUAL;\n  }\n  return Number(a) < Number(b) ? COMPARISON.SMALLER : COMPARISON.GREATER;\n};\nclass MinHeap {\n  constructor(compareFn = defaultCompareNumberFn) {\n    this.items = [];\n    this.items = [];\n    this.compareFn = compareFn;\n  }\n  insert(value) {\n    console.log(\"llsmnsndcks\");\n    this.items.push(value);\n    this.bubbleUp(this.items.length - 1);\n  }\n  bubbleUp(index) {\n    while (index > 0) {\n      const parentIndex = Math.floor((index - 1) / 2);\n      if (this.compareFn(this.items[parentIndex], this.items[index]) === COMPARISON.GREATER) {\n        this.swap(parentIndex, index);\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n  }\n  extractMin() {\n    if (this.items.length === 0) {\n      return null;\n    }\n    if (this.items.length === 1) {\n      return this.items.pop();\n    }\n    const min = this.items[0];\n    this.items[0] = this.items.pop();\n    this.sinkDown(0);\n    return min;\n  }\n  sinkDown(index) {\n    const leftChildIndex = 2 * index + 1;\n    const rightChildIndex = 2 * index + 2;\n    let minIndex = index;\n    if (leftChildIndex < this.items.length && this.compareFn(this.items[leftChildIndex], this.items[minIndex]) === COMPARISON.SMALLER) {\n      minIndex = leftChildIndex;\n    }\n    if (rightChildIndex < this.items.length && this.compareFn(this.items[rightChildIndex], this.items[minIndex]) === COMPARISON.SMALLER) {\n      minIndex = rightChildIndex;\n    }\n    if (minIndex !== index) {\n      this.swap(index, minIndex);\n      this.sinkDown(minIndex);\n    }\n  }\n  swap(index1, index2) {\n    [this.items[index1], this.items[index2]] = [this.items[index2], this.items[index1]];\n  }\n  peek() {\n    return this.items.length > 0 ? this.items[0] : null;\n  }\n  size() {\n    return this.items.length;\n  }\n  isEmpty() {\n    return this.items.length === 0;\n  }\n}\nexport default MinHeap;","map":{"version":3,"names":["COMPARISON","EQUAL","SMALLER","GREATER","defaultCompareNumberFn","a","b","Number","MinHeap","constructor","compareFn","items","insert","value","console","log","push","bubbleUp","length","index","parentIndex","Math","floor","swap","extractMin","pop","min","sinkDown","leftChildIndex","rightChildIndex","minIndex","index1","index2","peek","size","isEmpty"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/HEAP/minheap/minheap.js"],"sourcesContent":["const COMPARISON = {\n    EQUAL: 0,\n    SMALLER: -1,\n    GREATER: 1,\n  };\n  \n  const defaultCompareNumberFn = (a, b) => {\n    if (Number(a) === Number(b)) {\n      return COMPARISON.EQUAL;\n    }\n  \n    return Number(a) < Number(b) ? COMPARISON.SMALLER : COMPARISON.GREATER;\n  };\n  \n  class MinHeap {\n    items = [];\n    compareFn;\n  \n    constructor(compareFn = defaultCompareNumberFn) {\n      this.items = [];\n      this.compareFn = compareFn;\n    }\n  \n    insert(value) {\n      console.log(\"llsmnsndcks\");\n      this.items.push(value);\n      this.bubbleUp(this.items.length - 1);\n    }\n  \n    bubbleUp(index) {\n      while (index > 0) {\n        const parentIndex = Math.floor((index - 1) / 2);\n        if (this.compareFn(this.items[parentIndex], this.items[index]) === COMPARISON.GREATER) {\n          this.swap(parentIndex, index);\n          index = parentIndex;\n        } else {\n          break;\n        }\n      }\n    }\n  \n    extractMin() {\n      if (this.items.length === 0) {\n        return null;\n      }\n      if (this.items.length === 1) {\n        return this.items.pop();\n      }\n      const min = this.items[0];\n      this.items[0] = this.items.pop();\n      this.sinkDown(0);\n      return min;\n    }\n  \n    sinkDown(index) {\n      const leftChildIndex = 2 * index + 1;\n      const rightChildIndex = 2 * index + 2;\n      let minIndex = index;\n  \n      if (leftChildIndex < this.items.length && this.compareFn(this.items[leftChildIndex], this.items[minIndex]) === COMPARISON.SMALLER) {\n        minIndex = leftChildIndex;\n      }\n      if (rightChildIndex < this.items.length && this.compareFn(this.items[rightChildIndex], this.items[minIndex]) === COMPARISON.SMALLER) {\n        minIndex = rightChildIndex;\n      }\n  \n      if (minIndex !== index) {\n        this.swap(index, minIndex);\n        this.sinkDown(minIndex);\n      }\n    }\n  \n    swap(index1, index2) {\n      [this.items[index1], this.items[index2]] = [this.items[index2], this.items[index1]];\n    }\n  \n    peek() {\n      return this.items.length > 0 ? this.items[0] : null;\n    }\n  \n    size() {\n      return this.items.length;\n    }\n  \n    isEmpty() {\n      return this.items.length === 0;\n    }\n  }\n  \n  export default MinHeap;\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}