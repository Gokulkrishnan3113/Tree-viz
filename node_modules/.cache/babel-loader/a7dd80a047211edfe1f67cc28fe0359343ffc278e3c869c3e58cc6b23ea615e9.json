{"ast":null,"code":"import BinarySearchTree from \"../BST/js_binary_search_tree\";\nconst BLACK = 'BLACK';\nconst RED = 'RED';\nclass Node {\n  constructor(data, color = RED) {\n    this.value = data;\n    this.color = color;\n    this.left = null;\n    this.right = null;\n    // this.parent = null;\n  }\n  isLeftChild() {\n    return this.parent && this.parent.left === this;\n  }\n  flipColor() {\n    this.color = this.color === BLACK ? RED : BLACK;\n  }\n}\nclass RedBlackTree extends BinarySearchTree {\n  constructor() {\n    super();\n  }\n  insert(data) {\n    const node = new Node(data, RED);\n    this.root = this._insert(this.root, node);\n    this._recolorAndRotate(node);\n  }\n  _insert(currentNode, newNode) {\n    if (currentNode === null) {\n      return newNode;\n    }\n    if (newNode.data < currentNode.data) {\n      currentNode.left = this._insert(currentNode.left, newNode);\n      currentNode.left.parent = currentNode;\n    } else if (newNode.data > currentNode.data) {\n      currentNode.right = this._insert(currentNode.right, newNode);\n      currentNode.right.parent = currentNode;\n    }\n    return currentNode;\n  }\n  _recolorAndRotate(node) {\n    const parent = node.parent;\n    if (node !== this.root && parent.color === RED) {\n      const grandParent = parent.parent;\n      const uncle = parent.isLeftChild() ? grandParent.right : grandParent.left;\n      if (uncle !== null && uncle.color === RED) {\n        this._handleRecoloring(parent, uncle, grandParent);\n      } else if (parent.isLeftChild()) {\n        this._handleLeftSituations(node, parent, grandParent);\n      } else {\n        this._handleRightSituations(node, parent, grandParent);\n      }\n    }\n    this.root.color = BLACK;\n  }\n  _handleRightSituations(node, parent, grandParent) {\n    if (node.isLeftChild()) {\n      this._rotateRight(parent);\n    }\n    parent.flipColor();\n    grandParent.flipColor();\n    this._rotateLeft(grandParent);\n    this._recolorAndRotate(node.isLeftChild() ? grandParent : parent);\n  }\n  _handleLeftSituations(node, parent, grandParent) {\n    if (!node.isLeftChild()) {\n      this._rotateLeft(parent);\n    }\n    parent.flipColor();\n    grandParent.flipColor();\n    this._rotateRight(grandParent);\n    this._recolorAndRotate(node.isLeftChild() ? parent : grandParent);\n  }\n  _handleRecoloring(parent, uncle, grandParent) {\n    uncle.flipColor();\n    parent.flipColor();\n    grandParent.flipColor();\n    this._recolorAndRotate(grandParent);\n  }\n  _rotateRight(node) {\n    const leftNode = node.left;\n    node.left = leftNode.right;\n    if (node.left !== null) {\n      node.left.parent = node;\n    }\n    leftNode.right = node;\n    leftNode.parent = node.parent;\n    this._updateChildrenOfParentNode(node, leftNode);\n    node.parent = leftNode;\n  }\n  _rotateLeft(node) {\n    const rightNode = node.right;\n    node.right = rightNode.left;\n    if (node.right !== null) {\n      node.right.parent = node;\n    }\n    rightNode.left = node;\n    rightNode.parent = node.parent;\n    this._updateChildrenOfParentNode(node, rightNode);\n    node.parent = rightNode;\n  }\n  _updateChildrenOfParentNode(node, tempNode) {\n    if (node.parent === null) {\n      this.root = tempNode;\n    } else if (node.isLeftChild()) {\n      node.parent.left = tempNode;\n    } else {\n      node.parent.right = tempNode;\n    }\n  }\n  traverse() {\n    this._traverseInOrder(this.root);\n  }\n  _traverseInOrder(node) {\n    if (node !== null) {\n      this._traverseInOrder(node.left);\n      console.log(node.data);\n      this._traverseInOrder(node.right);\n    }\n  }\n  getMax() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    return this._getMax(this.root);\n  }\n  _getMax(node) {\n    if (node.right !== null) {\n      return this._getMax(node.right);\n    }\n    return node.data;\n  }\n  getMin() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    return this._getMin(this.root);\n  }\n  _getMin(node) {\n    if (node.left !== null) {\n      return this._getMin(node.left);\n    }\n    return node.data;\n  }\n  isEmpty() {\n    return this.root === null;\n  }\n}\nexport default RedBlackTree;","map":{"version":3,"names":["BinarySearchTree","BLACK","RED","Node","constructor","data","color","value","left","right","isLeftChild","parent","flipColor","RedBlackTree","insert","node","root","_insert","_recolorAndRotate","currentNode","newNode","grandParent","uncle","_handleRecoloring","_handleLeftSituations","_handleRightSituations","_rotateRight","_rotateLeft","leftNode","_updateChildrenOfParentNode","rightNode","tempNode","traverse","_traverseInOrder","console","log","getMax","isEmpty","_getMax","getMin","_getMin"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/RB/rb.js"],"sourcesContent":["import BinarySearchTree from \"../BST/js_binary_search_tree\";\nconst BLACK = 'BLACK';\nconst RED = 'RED';\n\nclass Node {\n    constructor(data, color = RED) {\n        this.value = data;\n        this.color = color;\n        this.left = null;\n        this.right = null;\n        // this.parent = null;\n    }\n\n\n  isLeftChild() {\n      return this.parent && this.parent.left === this;\n  }\n\n  flipColor() {\n      this.color = this.color === BLACK ? RED : BLACK;\n  }\n}\n\nclass RedBlackTree extends BinarySearchTree{\n  constructor() {\n    super();\n  }\n\n  insert(data) {\n    const node = new Node(data, RED);\n    this.root = this._insert(this.root, node);\n    this._recolorAndRotate(node);   \n}\n\n\n  _insert(currentNode, newNode) {\n      if (currentNode === null) {\n          return newNode;\n      }\n\n      if (newNode.data < currentNode.data) {\n          currentNode.left = this._insert(currentNode.left, newNode);\n          currentNode.left.parent = currentNode;\n      } else if (newNode.data > currentNode.data) {\n          currentNode.right = this._insert(currentNode.right, newNode);\n          currentNode.right.parent = currentNode;\n      }\n\n      return currentNode;\n  }\n\n  _recolorAndRotate(node) {\n      const parent = node.parent;\n      if (node !== this.root && parent.color === RED) {\n          const grandParent = parent.parent;\n          const uncle = parent.isLeftChild() ? grandParent.right : grandParent.left;\n\n          if (uncle !== null && uncle.color === RED) {\n              this._handleRecoloring(parent, uncle, grandParent);\n          } else if (parent.isLeftChild()) {\n              this._handleLeftSituations(node, parent, grandParent);\n          } else {\n              this._handleRightSituations(node, parent, grandParent);\n          }\n      }\n\n      this.root.color = BLACK;\n  }\n\n  _handleRightSituations(node, parent, grandParent) {\n      if (node.isLeftChild()) {\n          this._rotateRight(parent);\n      }\n      parent.flipColor();\n      grandParent.flipColor();\n      this._rotateLeft(grandParent);\n      this._recolorAndRotate(node.isLeftChild() ? grandParent : parent);\n  }\n\n  _handleLeftSituations(node, parent, grandParent) {\n      if (!node.isLeftChild()) {\n          this._rotateLeft(parent);\n      }\n      parent.flipColor();\n      grandParent.flipColor();\n      this._rotateRight(grandParent);\n      this._recolorAndRotate(node.isLeftChild() ? parent : grandParent);\n  }\n\n  _handleRecoloring(parent, uncle, grandParent) {\n      uncle.flipColor();\n      parent.flipColor();\n      grandParent.flipColor();\n      this._recolorAndRotate(grandParent);\n  }\n\n  _rotateRight(node) {\n      const leftNode = node.left;\n      node.left = leftNode.right;\n\n      if (node.left !== null) {\n          node.left.parent = node;\n      }\n\n      leftNode.right = node;\n      leftNode.parent = node.parent;\n      this._updateChildrenOfParentNode(node, leftNode);\n      node.parent = leftNode;\n  }\n\n  _rotateLeft(node) {\n      const rightNode = node.right;\n      node.right = rightNode.left;\n\n      if (node.right !== null) {\n          node.right.parent = node;\n      }\n\n      rightNode.left = node;\n      rightNode.parent = node.parent;\n      this._updateChildrenOfParentNode(node, rightNode);\n      node.parent = rightNode;\n  }\n\n  _updateChildrenOfParentNode(node, tempNode) {\n      if (node.parent === null) {\n          this.root = tempNode;\n      } else if (node.isLeftChild()) {\n          node.parent.left = tempNode;\n      } else {\n          node.parent.right = tempNode;\n      }\n  }\n\n  traverse() {\n      this._traverseInOrder(this.root);\n  }\n\n  _traverseInOrder(node) {\n      if (node !== null) {\n          this._traverseInOrder(node.left);\n          console.log(node.data);\n          this._traverseInOrder(node.right);\n      }\n  }\n\n  getMax() {\n      if (this.isEmpty()) {\n          return null;\n      }\n      return this._getMax(this.root);\n  }\n\n  _getMax(node) {\n      if (node.right !== null) {\n          return this._getMax(node.right);\n      }\n      return node.data;\n  }\n\n  getMin() {\n      if (this.isEmpty()) {\n          return null;\n      }\n      return this._getMin(this.root);\n  }\n\n  _getMin(node) {\n      if (node.left !== null) {\n          return this._getMin(node.left);\n      }\n      return node.data;\n  }\n\n  isEmpty() {\n      return this.root === null;\n  }\n}\nexport default RedBlackTree;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}