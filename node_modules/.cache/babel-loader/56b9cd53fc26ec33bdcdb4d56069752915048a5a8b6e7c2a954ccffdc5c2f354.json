{"ast":null,"code":"class TrieNode {\n  constructor() {\n    this.children = {};\n    this.isEndofword = false;\n  }\n}\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n  insert(word) {\n    let currentnode = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!currentnode.children[char]) {\n        currentnode.children[char] = new TrieNode();\n      }\n      currentnode = currentnode.children[char];\n    }\n    currentnode.isEndofword = true;\n  }\n  search(word) {\n    let currentnode = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!currentnode.children[char]) {\n        return false;\n      }\n      currentnode = currentnode.children[char];\n    }\n    return currentnode.isEndofword;\n  }\n  delete(word) {\n    if (!this.search(word)) {\n      console.log(`${word} does not exist in the trie.`);\n      return;\n    }\n    let currentnode = this.root;\n    let stack = []; // Stack to keep track of nodes in the path\n\n    // Traverse to the node corresponding to the last character of the word\n    for (let i = 0; i < word.length; i++) {\n      stack.push({\n        node: currentnode,\n        char: word[i]\n      });\n      currentnode = currentnode.children[word[i]];\n    }\n\n    // Unmark the end of the word\n    currentnode.isEndofword = false;\n\n    // Check if the node has no children and delete it\n    while (stack.length > 0 && Object.keys(currentnode.children).length === 0) {\n      let {\n        node,\n        char\n      } = stack.pop();\n      delete node.children[char];\n      currentnode = node;\n    }\n    console.log(`${word} has been deleted from the trie.`);\n  }\n  deleteTree() {\n    this.root = new TrieNode();\n    console.log(\"Trie has been deleted.\");\n  }\n}\nclass TrieRenderer {\n  constructor(trieInstance) {\n    this.onInsertTrieClick = async () => {\n      const element = await this.promptAsync('Enter word to insert into the trie');\n      if (!element) {\n        return;\n      }\n      this.trie.insert(element);\n      this.renderTrie();\n    };\n    this.onRemoveTrieClick = async () => {\n      const element = await this.promptAsync('Enter word to remove from the trie');\n      if (!element) {\n        return;\n      }\n      this.trie.delete(element);\n      this.renderTrie();\n    };\n    this.onDeleteTrieClick = () => {\n      this.trie.deleteTree();\n      this.renderTrie();\n    };\n    this.promptAsync = promptMessage => {\n      return new Promise(resolve => {\n        const userInput = prompt(promptMessage);\n        resolve(userInput);\n      });\n    };\n    this.renderTrie = () => {\n      const trieContainer = document.querySelector(this.trieContainerSelector);\n      trieContainer.innerHTML = this.getTrieUI(this.root);\n\n      // Add line breaks based on common prefixes\n      const nodes = trieContainer.querySelectorAll('.node__element');\n      let previousParentId = null;\n      nodes.forEach(node => {\n        const parentId = node.getAttribute('data-parent-id');\n        if (parentId && parentId !== previousParentId) {\n          // Insert line break after each distinct parent node\n          const lineBreak = document.createElement('br');\n          node.insertAdjacentElement('beforebegin', lineBreak);\n          previousParentId = parentId;\n        }\n      });\n    };\n    this.getTrieUI = (node, value = '') => {\n      const {\n        children\n      } = node;\n      if (!node) {\n        return '';\n      }\n      let childrenUI = '';\n      for (const char in children) {\n        if (children.hasOwnProperty(char)) {\n          const childNode = children[char];\n          childrenUI += this.getTrieUI(childNode, char);\n        }\n      }\n      return `\n            <div class=\"node__container node\">\n                <div class=\"node__element\" data-node-id=\"${value}\">\n                    ${value}\n                </div>\n                ${childrenUI ? `\n                        <div class=\"node__bottom-line\"></div>\n                        <div class=\"node__children\">\n                            ${childrenUI}\n                        </div>\n                        ` : ''}\n            </div>\n        `;\n    };\n    this.trie = trieInstance;\n    this.actionsContainerSelector = '.trie-actions-container';\n    this.trieContainerSelector = '#trie-container';\n    this.root = trieInstance.root;\n  }\n  template() {\n    return `\n        <div class=\"btn-group\">\n          <button id=\"inserttrie\" class=\"btn btn-warning\">\n            Insert Node\n          </button>\n          <button id=\"removetrie\" class=\"btn btn-dark\">\n            Remove Node\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button id=\"deletetrie\" class=\"btn btn-danger\">\n            Delete Tree\n          </button>\n        </div>\n        `;\n  }\n  setTemplate() {\n    const actionsContainer = document.querySelector(this.actionsContainerSelector);\n    actionsContainer.innerHTML = this.template();\n  }\n  init() {\n    this.setTemplate();\n    const insert = document.querySelector('#inserttrie');\n    const remove = document.querySelector('#removetrie');\n    const delBtn = document.querySelector('#deletetrie');\n    insert.addEventListener('click', this.onInsertTrieClick.bind(this));\n    remove.addEventListener('click', this.onRemoveTrieClick.bind(this));\n    delBtn.addEventListener('click', this.onDeleteTrieClick.bind(this));\n  }\n}\nexport { Trie, TrieRenderer };","map":{"version":3,"names":["TrieNode","constructor","children","isEndofword","Trie","root","insert","word","currentnode","i","length","char","search","delete","console","log","stack","push","node","Object","keys","pop","deleteTree","TrieRenderer","trieInstance","onInsertTrieClick","element","promptAsync","trie","renderTrie","onRemoveTrieClick","onDeleteTrieClick","promptMessage","Promise","resolve","userInput","prompt","trieContainer","document","querySelector","trieContainerSelector","innerHTML","getTrieUI","nodes","querySelectorAll","previousParentId","forEach","parentId","getAttribute","lineBreak","createElement","insertAdjacentElement","value","childrenUI","hasOwnProperty","childNode","actionsContainerSelector","template","setTemplate","actionsContainer","init","remove","delBtn","addEventListener","bind"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/TRIES/tries.js"],"sourcesContent":["class TrieNode {\n    constructor() {\n        this.children = {};\n        this.isEndofword = false;\n    }\n}\n\nclass Trie {\n    constructor() {\n        this.root = new TrieNode();\n    }\n\n    insert(word) {\n        let currentnode = this.root;\n        for (let i = 0; i < word.length; i++) {\n            const char = word[i];\n            if (!currentnode.children[char]) {\n                currentnode.children[char] = new TrieNode();\n            }\n            currentnode = currentnode.children[char];\n        }\n        currentnode.isEndofword = true;\n    }\n\n    search(word) {\n        let currentnode = this.root;\n        for (let i = 0; i < word.length; i++) {\n            const char = word[i];\n            if (!currentnode.children[char]) {\n                return false;\n            }\n            currentnode = currentnode.children[char];\n        }\n        return currentnode.isEndofword;\n    }\n\n    delete(word) {\n        if (!this.search(word)) {\n            console.log(`${word} does not exist in the trie.`);\n            return;\n        }\n\n        let currentnode = this.root;\n        let stack = []; // Stack to keep track of nodes in the path\n\n        // Traverse to the node corresponding to the last character of the word\n        for (let i = 0; i < word.length; i++) {\n            stack.push({ node: currentnode, char: word[i] });\n            currentnode = currentnode.children[word[i]];\n        }\n\n        // Unmark the end of the word\n        currentnode.isEndofword = false;\n\n        // Check if the node has no children and delete it\n        while (stack.length > 0 && Object.keys(currentnode.children).length === 0) {\n            let { node, char } = stack.pop();\n            delete node.children[char];\n            currentnode = node;\n        }\n\n        console.log(`${word} has been deleted from the trie.`);\n    }\n\n    deleteTree() {\n        this.root = new TrieNode();\n        console.log(\"Trie has been deleted.\");\n    }\n}\n\nclass TrieRenderer {\n    constructor(trieInstance) {\n        this.trie = trieInstance;\n        this.actionsContainerSelector = '.trie-actions-container';\n        this.trieContainerSelector = '#trie-container';\n        this.root = trieInstance.root;\n    }\n    \n    template() {\n        return `\n        <div class=\"btn-group\">\n          <button id=\"inserttrie\" class=\"btn btn-warning\">\n            Insert Node\n          </button>\n          <button id=\"removetrie\" class=\"btn btn-dark\">\n            Remove Node\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button id=\"deletetrie\" class=\"btn btn-danger\">\n            Delete Tree\n          </button>\n        </div>\n        `;\n    }\n\n    setTemplate() {\n        const actionsContainer = document.querySelector(this.actionsContainerSelector);\n        actionsContainer.innerHTML = this.template();\n    }\n\n    init() {\n        this.setTemplate();\n        const insert = document.querySelector('#inserttrie');\n        const remove = document.querySelector('#removetrie');\n        const delBtn = document.querySelector('#deletetrie');\n        insert.addEventListener('click', this.onInsertTrieClick.bind(this));\n        remove.addEventListener('click', this.onRemoveTrieClick.bind(this));\n        delBtn.addEventListener('click', this.onDeleteTrieClick.bind(this));\n    }\n\n    onInsertTrieClick = async () => {\n        const element = await this.promptAsync('Enter word to insert into the trie');\n        if (!element) {\n            return;\n        }\n        this.trie.insert(element);\n        this.renderTrie();\n    };\n\n    onRemoveTrieClick = async () => {\n        const element = await this.promptAsync('Enter word to remove from the trie');\n        if (!element) {\n            return;\n        }\n        this.trie.delete(element);\n        this.renderTrie();\n    };\n\n    onDeleteTrieClick = () => {\n        this.trie.deleteTree();\n        this.renderTrie();\n    };\n\n    promptAsync = (promptMessage) => {\n        return new Promise(resolve => {\n            const userInput = prompt(promptMessage);\n            resolve(userInput);\n        });\n    };\n\n    renderTrie = () => {\n        const trieContainer = document.querySelector(this.trieContainerSelector);\n        trieContainer.innerHTML = this.getTrieUI(this.root);\n    \n        // Add line breaks based on common prefixes\n        const nodes = trieContainer.querySelectorAll('.node__element');\n        let previousParentId = null;\n    \n        nodes.forEach((node) => {\n            const parentId = node.getAttribute('data-parent-id');\n    \n            if (parentId && parentId !== previousParentId) {\n                // Insert line break after each distinct parent node\n                const lineBreak = document.createElement('br');\n                node.insertAdjacentElement('beforebegin', lineBreak);\n                previousParentId = parentId;\n            }\n        });\n    };\n\n    getTrieUI = (node, value = '') => {\n        const { children } = node;\n\n        if (!node) {\n            return '';\n        }\n\n        let childrenUI = '';\n        for (const char in children) {\n            if (children.hasOwnProperty(char)) {\n                const childNode = children[char];\n                childrenUI += this.getTrieUI(childNode, char);\n            }\n        }\n\n        return `\n            <div class=\"node__container node\">\n                <div class=\"node__element\" data-node-id=\"${value}\">\n                    ${value}\n                </div>\n                ${\n                    childrenUI\n                        ? `\n                        <div class=\"node__bottom-line\"></div>\n                        <div class=\"node__children\">\n                            ${childrenUI}\n                        </div>\n                        `\n                        : ''\n                }\n            </div>\n        `;\n    };   \n}\n\nexport { Trie, TrieRenderer };"],"mappings":"AAAA,MAAMA,QAAQ,CAAC;EACXC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACC,WAAW,GAAG,KAAK;EAC5B;AACJ;AAEA,MAAMC,IAAI,CAAC;EACPH,WAAWA,CAAA,EAAG;IACV,IAAI,CAACI,IAAI,GAAG,IAAIL,QAAQ,CAAC,CAAC;EAC9B;EAEAM,MAAMA,CAACC,IAAI,EAAE;IACT,IAAIC,WAAW,GAAG,IAAI,CAACH,IAAI;IAC3B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAClC,MAAME,IAAI,GAAGJ,IAAI,CAACE,CAAC,CAAC;MACpB,IAAI,CAACD,WAAW,CAACN,QAAQ,CAACS,IAAI,CAAC,EAAE;QAC7BH,WAAW,CAACN,QAAQ,CAACS,IAAI,CAAC,GAAG,IAAIX,QAAQ,CAAC,CAAC;MAC/C;MACAQ,WAAW,GAAGA,WAAW,CAACN,QAAQ,CAACS,IAAI,CAAC;IAC5C;IACAH,WAAW,CAACL,WAAW,GAAG,IAAI;EAClC;EAEAS,MAAMA,CAACL,IAAI,EAAE;IACT,IAAIC,WAAW,GAAG,IAAI,CAACH,IAAI;IAC3B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAClC,MAAME,IAAI,GAAGJ,IAAI,CAACE,CAAC,CAAC;MACpB,IAAI,CAACD,WAAW,CAACN,QAAQ,CAACS,IAAI,CAAC,EAAE;QAC7B,OAAO,KAAK;MAChB;MACAH,WAAW,GAAGA,WAAW,CAACN,QAAQ,CAACS,IAAI,CAAC;IAC5C;IACA,OAAOH,WAAW,CAACL,WAAW;EAClC;EAEAU,MAAMA,CAACN,IAAI,EAAE;IACT,IAAI,CAAC,IAAI,CAACK,MAAM,CAACL,IAAI,CAAC,EAAE;MACpBO,OAAO,CAACC,GAAG,CAAE,GAAER,IAAK,8BAA6B,CAAC;MAClD;IACJ;IAEA,IAAIC,WAAW,GAAG,IAAI,CAACH,IAAI;IAC3B,IAAIW,KAAK,GAAG,EAAE,CAAC,CAAC;;IAEhB;IACA,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAClCO,KAAK,CAACC,IAAI,CAAC;QAAEC,IAAI,EAAEV,WAAW;QAAEG,IAAI,EAAEJ,IAAI,CAACE,CAAC;MAAE,CAAC,CAAC;MAChDD,WAAW,GAAGA,WAAW,CAACN,QAAQ,CAACK,IAAI,CAACE,CAAC,CAAC,CAAC;IAC/C;;IAEA;IACAD,WAAW,CAACL,WAAW,GAAG,KAAK;;IAE/B;IACA,OAAOa,KAAK,CAACN,MAAM,GAAG,CAAC,IAAIS,MAAM,CAACC,IAAI,CAACZ,WAAW,CAACN,QAAQ,CAAC,CAACQ,MAAM,KAAK,CAAC,EAAE;MACvE,IAAI;QAAEQ,IAAI;QAAEP;MAAK,CAAC,GAAGK,KAAK,CAACK,GAAG,CAAC,CAAC;MAChC,OAAOH,IAAI,CAAChB,QAAQ,CAACS,IAAI,CAAC;MAC1BH,WAAW,GAAGU,IAAI;IACtB;IAEAJ,OAAO,CAACC,GAAG,CAAE,GAAER,IAAK,kCAAiC,CAAC;EAC1D;EAEAe,UAAUA,CAAA,EAAG;IACT,IAAI,CAACjB,IAAI,GAAG,IAAIL,QAAQ,CAAC,CAAC;IAC1Bc,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACzC;AACJ;AAEA,MAAMQ,YAAY,CAAC;EACftB,WAAWA,CAACuB,YAAY,EAAE;IAAA,KAwC1BC,iBAAiB,GAAG,YAAY;MAC5B,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACC,WAAW,CAAC,oCAAoC,CAAC;MAC5E,IAAI,CAACD,OAAO,EAAE;QACV;MACJ;MACA,IAAI,CAACE,IAAI,CAACtB,MAAM,CAACoB,OAAO,CAAC;MACzB,IAAI,CAACG,UAAU,CAAC,CAAC;IACrB,CAAC;IAAA,KAEDC,iBAAiB,GAAG,YAAY;MAC5B,MAAMJ,OAAO,GAAG,MAAM,IAAI,CAACC,WAAW,CAAC,oCAAoC,CAAC;MAC5E,IAAI,CAACD,OAAO,EAAE;QACV;MACJ;MACA,IAAI,CAACE,IAAI,CAACf,MAAM,CAACa,OAAO,CAAC;MACzB,IAAI,CAACG,UAAU,CAAC,CAAC;IACrB,CAAC;IAAA,KAEDE,iBAAiB,GAAG,MAAM;MACtB,IAAI,CAACH,IAAI,CAACN,UAAU,CAAC,CAAC;MACtB,IAAI,CAACO,UAAU,CAAC,CAAC;IACrB,CAAC;IAAA,KAEDF,WAAW,GAAIK,aAAa,IAAK;MAC7B,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;QAC1B,MAAMC,SAAS,GAAGC,MAAM,CAACJ,aAAa,CAAC;QACvCE,OAAO,CAACC,SAAS,CAAC;MACtB,CAAC,CAAC;IACN,CAAC;IAAA,KAEDN,UAAU,GAAG,MAAM;MACf,MAAMQ,aAAa,GAAGC,QAAQ,CAACC,aAAa,CAAC,IAAI,CAACC,qBAAqB,CAAC;MACxEH,aAAa,CAACI,SAAS,GAAG,IAAI,CAACC,SAAS,CAAC,IAAI,CAACrC,IAAI,CAAC;;MAEnD;MACA,MAAMsC,KAAK,GAAGN,aAAa,CAACO,gBAAgB,CAAC,gBAAgB,CAAC;MAC9D,IAAIC,gBAAgB,GAAG,IAAI;MAE3BF,KAAK,CAACG,OAAO,CAAE5B,IAAI,IAAK;QACpB,MAAM6B,QAAQ,GAAG7B,IAAI,CAAC8B,YAAY,CAAC,gBAAgB,CAAC;QAEpD,IAAID,QAAQ,IAAIA,QAAQ,KAAKF,gBAAgB,EAAE;UAC3C;UACA,MAAMI,SAAS,GAAGX,QAAQ,CAACY,aAAa,CAAC,IAAI,CAAC;UAC9ChC,IAAI,CAACiC,qBAAqB,CAAC,aAAa,EAAEF,SAAS,CAAC;UACpDJ,gBAAgB,GAAGE,QAAQ;QAC/B;MACJ,CAAC,CAAC;IACN,CAAC;IAAA,KAEDL,SAAS,GAAG,CAACxB,IAAI,EAAEkC,KAAK,GAAG,EAAE,KAAK;MAC9B,MAAM;QAAElD;MAAS,CAAC,GAAGgB,IAAI;MAEzB,IAAI,CAACA,IAAI,EAAE;QACP,OAAO,EAAE;MACb;MAEA,IAAImC,UAAU,GAAG,EAAE;MACnB,KAAK,MAAM1C,IAAI,IAAIT,QAAQ,EAAE;QACzB,IAAIA,QAAQ,CAACoD,cAAc,CAAC3C,IAAI,CAAC,EAAE;UAC/B,MAAM4C,SAAS,GAAGrD,QAAQ,CAACS,IAAI,CAAC;UAChC0C,UAAU,IAAI,IAAI,CAACX,SAAS,CAACa,SAAS,EAAE5C,IAAI,CAAC;QACjD;MACJ;MAEA,OAAQ;AAChB;AACA,2DAA2DyC,KAAM;AACjE,sBAAsBA,KAAM;AAC5B;AACA,kBACoBC,UAAU,GACH;AAC3B;AACA;AACA,8BAA8BA,UAAW;AACzC;AACA,yBAAyB,GACC,EACT;AACjB;AACA,SAAS;IACL,CAAC;IAzHG,IAAI,CAACzB,IAAI,GAAGJ,YAAY;IACxB,IAAI,CAACgC,wBAAwB,GAAG,yBAAyB;IACzD,IAAI,CAAChB,qBAAqB,GAAG,iBAAiB;IAC9C,IAAI,CAACnC,IAAI,GAAGmB,YAAY,CAACnB,IAAI;EACjC;EAEAoD,QAAQA,CAAA,EAAG;IACP,OAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;EACL;EAEAC,WAAWA,CAAA,EAAG;IACV,MAAMC,gBAAgB,GAAGrB,QAAQ,CAACC,aAAa,CAAC,IAAI,CAACiB,wBAAwB,CAAC;IAC9EG,gBAAgB,CAAClB,SAAS,GAAG,IAAI,CAACgB,QAAQ,CAAC,CAAC;EAChD;EAEAG,IAAIA,CAAA,EAAG;IACH,IAAI,CAACF,WAAW,CAAC,CAAC;IAClB,MAAMpD,MAAM,GAAGgC,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC;IACpD,MAAMsB,MAAM,GAAGvB,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC;IACpD,MAAMuB,MAAM,GAAGxB,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC;IACpDjC,MAAM,CAACyD,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACtC,iBAAiB,CAACuC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnEH,MAAM,CAACE,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACjC,iBAAiB,CAACkC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnEF,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAChC,iBAAiB,CAACiC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvE;AAqFJ;AAEA,SAAS5D,IAAI,EAAEmB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}