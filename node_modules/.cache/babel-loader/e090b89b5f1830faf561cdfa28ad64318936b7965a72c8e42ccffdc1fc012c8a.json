{"ast":null,"code":"const COMPARISON={EQUAL:0,SMALLER:-1,GREATER:1};const defaultCompareNumberFn=(a,b)=>{if(Number(a)===Number(b)){return COMPARISON.EQUAL;}return Number(a)<Number(b)?COMPARISON.SMALLER:COMPARISON.GREATER;};class TreeNode{constructor(value,parent){this.value=value.toString();this.parent=parent||null;this.left=null;this.right=null;}get isLeaf(){return this.left===null&&this.right===null;}get hasChildren(){return!this.isLeaf;}}class BinarySearchTree{constructor(){let compareFn=arguments.length>0&&arguments[0]!==undefined?arguments[0]:defaultCompareNumberFn;this.root=null;this.compareFn=compareFn;}insert(value){let node=this.root;let insertedNode;if(node===null){this.root=new TreeNode(value);return this.root;}const nodeInserted=(()=>{while(true){const comparison=this.compareFn(value,node.value);if(comparison===COMPARISON.EQUAL){insertedNode=node;return node;}if(comparison===COMPARISON.SMALLER){if(node.left===null){insertedNode=new TreeNode(value,node);node.left=insertedNode;return true;}node=node.left;}else if(comparison===COMPARISON.GREATER){if(node.right===null){insertedNode=new TreeNode(value,node);node.right=insertedNode;return true;}node=node.right;}}})();if(nodeInserted){return insertedNode;}}remove(value,node){node=node?node:this.search(value);if(!node)return null;const nodeIsRoot=node.parent===null;const hasBothChildren=node.left!==null&&node.right!==null;const isLeftChild=!nodeIsRoot?node.parent.left===node:false;if(node.isLeaf){if(nodeIsRoot){this.root=null;}else if(isLeftChild){node.parent.left=null;}else{node.parent.right=null;}return node;}if(!hasBothChildren){const child=node.left!==null?node.left:node.right;if(nodeIsRoot){this.root=child;}else if(isLeftChild){node.parent.left=child;}else{node.parent.right=child;}child.parent=node.parent;return node;}const minRightLeaf=this.min(node.right);if(minRightLeaf.parent.left===minRightLeaf){minRightLeaf.parent.left=null;}else{minRightLeaf.parent.right=null;}const clone={...node};node.value=minRightLeaf.value;return clone;}search(value){return this.postOrderTraverse().find(node=>node.value===value);}min(){let node=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.root;let current=node;while(current!==null&&current.left!==null){current=current.left;}return current;}max(){let node=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.root;let current=node;while(current!==null&&current.right!==null){current=current.right;}return current;}inOrderTraverse(){let node=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.root;let traversed=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if(node===null){return traversed;}if(node.left){traversed.push(...this.inOrderTraverse(node.left));}traversed.push(node);if(node.right){traversed.push(...this.inOrderTraverse(node.right));}return traversed;}preOrderTraverse(){let node=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.root;let traversed=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if(node===null){return traversed;}traversed.push(node);if(node.left){traversed.push(...this.preOrderTraverse(node.left));}if(node.right){traversed.push(...this.preOrderTraverse(node.right));}return traversed;}postOrderTraverse(){let node=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.root;let traversed=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if(node===null){return traversed;}if(node.left){traversed.push(...this.postOrderTraverse(node.left));}if(node.right){traversed.push(...this.postOrderTraverse(node.right));}traversed.push(node);return traversed;}}export default BinarySearchTree;","map":{"version":3,"names":["COMPARISON","EQUAL","SMALLER","GREATER","defaultCompareNumberFn","a","b","Number","TreeNode","constructor","value","parent","toString","left","right","isLeaf","hasChildren","BinarySearchTree","compareFn","arguments","length","undefined","root","insert","node","insertedNode","nodeInserted","comparison","remove","search","nodeIsRoot","hasBothChildren","isLeftChild","child","minRightLeaf","min","clone","postOrderTraverse","find","current","max","inOrderTraverse","traversed","push","preOrderTraverse"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/BST/impl.js"],"sourcesContent":["const COMPARISON = {\n    EQUAL: 0,\n    SMALLER: -1,\n    GREATER: 1,\n  };\n  \n  const defaultCompareNumberFn = (a, b) => {\n    if (Number(a) === Number(b)) {\n      return COMPARISON.EQUAL;\n    }\n  \n    return Number(a) < Number(b) ? COMPARISON.SMALLER : COMPARISON.GREATER;\n  };\n  \n  class TreeNode {\n    constructor(value, parent) {\n      this.value = value.toString();\n      this.parent = parent || null;\n      this.left = null;\n      this.right = null;\n    }\n  \n    get isLeaf() {\n      return this.left === null && this.right === null;\n    }\n  \n    get hasChildren() {\n      return !this.isLeaf;\n    }\n  }\n  class BinarySearchTree {\n    root;\n    compareFn;\n    constructor(compareFn = defaultCompareNumberFn) {\n      this.root = null;\n      this.compareFn = compareFn;\n    }\n  \n    insert(value) {\n      let node = this.root;\n      let insertedNode;\n      if (node === null) {\n        this.root = new TreeNode(value);\n        return this.root;\n      }\n      const nodeInserted = (() => {\n        while (true) {\n          const comparison = this.compareFn(value, node.value);\n          if (comparison === COMPARISON.EQUAL) {\n            insertedNode = node;\n            return node;\n          }\n          if (comparison === COMPARISON.SMALLER) {\n            if (node.left === null) {\n              insertedNode = new TreeNode(value, node);\n              node.left = insertedNode;\n              return true;\n            }\n            node = node.left;\n          } else if (comparison === COMPARISON.GREATER) {\n            if (node.right === null) {\n              insertedNode = new TreeNode(value, node);\n              node.right = insertedNode;\n              return true;\n            }\n            node = node.right;\n          }\n        }\n      })();\n      if (nodeInserted) {\n        return insertedNode;\n      }\n    }\n  \n    remove(value, node) {\n      node = node ? node : this.search(value);\n      if (!node) return null;\n  \n      const nodeIsRoot = node.parent === null;\n      const hasBothChildren = node.left !== null && node.right !== null;\n      const isLeftChild = !nodeIsRoot ? node.parent.left === node : false;\n  \n      if (node.isLeaf) {\n        if (nodeIsRoot) {\n          this.root = null;\n        } else if (isLeftChild) {\n          node.parent.left = null;\n        } else {\n          node.parent.right = null;\n        }\n        return node;\n      }\n      if (!hasBothChildren) {\n        const child = node.left !== null ? node.left : node.right;\n        if (nodeIsRoot) {\n          this.root = child;\n        } else if (isLeftChild) {\n          node.parent.left = child;\n        } else {\n          node.parent.right = child;\n        }\n        child.parent = node.parent;\n        return node;\n      }\n  \n      const minRightLeaf = this.min(node.right);\n      if (minRightLeaf.parent.left === minRightLeaf) {\n        minRightLeaf.parent.left = null;\n      } else {\n        minRightLeaf.parent.right = null;\n      }\n      const clone = { ...node };\n      node.value = minRightLeaf.value;\n      return clone;\n    }\n    search(value) {\n      return this.postOrderTraverse().find((node) => node.value === value);\n    }\n    min(node = this.root) {\n      let current = node;\n      while (current !== null && current.left !== null) {\n        current = current.left;\n      }\n      return current;\n    }\n    max(node = this.root) {\n      let current = node;\n      while (current !== null && current.right !== null) {\n        current = current.right;\n      }\n      return current;\n    }\n    inOrderTraverse(node = this.root, traversed = []) {\n      if (node === null) {\n        return traversed;\n      }\n      if (node.left) {\n        traversed.push(...this.inOrderTraverse(node.left));\n      }\n      traversed.push(node);\n      if (node.right) {\n        traversed.push(...this.inOrderTraverse(node.right));\n      }\n      return traversed;\n    }\n    preOrderTraverse(node = this.root, traversed = []) {\n      if (node === null) {\n        return traversed;\n      }\n      traversed.push(node);\n      if (node.left) {\n        traversed.push(...this.preOrderTraverse(node.left));\n      }\n      if (node.right) {\n        traversed.push(...this.preOrderTraverse(node.right));\n      }\n      return traversed;\n    }\n    postOrderTraverse(node = this.root, traversed = []) {\n      if (node === null) {\n        return traversed;\n      }\n      if (node.left) {\n        traversed.push(...this.postOrderTraverse(node.left));\n      }\n      if (node.right) {\n        traversed.push(...this.postOrderTraverse(node.right));\n      }\n      traversed.push(node);\n      return traversed;\n    }\n  }\n  \n  export default BinarySearchTree;\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}