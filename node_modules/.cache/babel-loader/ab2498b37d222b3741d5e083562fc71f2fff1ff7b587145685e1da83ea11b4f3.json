{"ast":null,"code":"// // import BinarySearchTreeUI from '../BST/bst-ui';\n// import _ from 'lodash';\n// // import RedBlackTree from './rb';\n\nexport default class RBTreeUI {\n  constructor() {\n    // balancePreviewVisible = true;\n    // balancedTree;\n    // constructor() {\n    //   super(...arguments);\n    //   this.tree = new RedBlackTree();\n    this.treeContainerSelector = '.rb-tree';\n    this.actionsContainerSelector = '.rb-actions-container';\n    this.onInsertTrieClick = async () => {\n      const element = await this.promptAsync('Enter word to insert into the trie');\n      if (!element) {\n        return;\n      }\n      this.trie.insert(element);\n      this.renderTrie(this.trie.root);\n    };\n  }\n  template() {\n    return `\n        <div class=\"btn-group\">\n          <button id=\"insertrbnode\" class=\"btn btn-warning\">\n            Insert Node\n          </button>\n          <button id=\"removerbnode\" class=\"btn btn-dark\">\n            Remove Node\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button id=\"deleterbtree\" class=\"btn btn-danger\">\n            Delete Tree\n          </button>\n        </div>\n          <div class=\"btn-group\">\n            <button id=\"PreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\n              Hide Balance Tree Preview\n            </button>\n          </div>\n        `;\n  }\n  init() {\n    this.setTemplate();\n    const insert = document.querySelector('#insertrbnode');\n    const removeElementBtn = document.querySelector('#removerbnode');\n    const delBtn = document.querySelector('#deleterbtree');\n    // const toggleBalancePreviewBtn = document.querySelector('#PreviewBtn');\n    insert.addEventListener('click', this.onInsertrbClick.bind(this));\n    removeElementBtn.addEventListener('click', this.onRemoverbClick.bind(this));\n    delBtn.addEventListener('click', this.onResetrbClick.bind(this));\n    // toggleBalancePreviewBtn.addEventListener('click', () => {this.resetBalancedTreeView();});\n  }\n  promptAsync(promptMessage) {\n    return new Promise(resolve => {\n      const element = prompt(promptMessage);\n      resolve(element);\n    });\n  }\n\n  //     onRemoverbClick() {\n  //         const element = prompt('Enter element to remove from the tree');\n  //         if (!element) {\n  //             return;\n  //         }\n  //         const elementExists = this.tree.search(element);\n  //         if (!elementExists) {\n  //             alert('Element not found');\n  //             return;\n  //         }\n\n  //         // Use remove instead of removerb\n  //         const removedEl = this.tree.remove(element);\n  //         if (removedEl) {\n  //             this.highlightNode(removedEl).then(() => {\n  //                 this.render(this.tree.root);\n  //             });\n  //         }\n  //     }\n\n  //     onResetrbClick() {\n  //         if (!this.tree.root) {\n  //             alert('Create a tree to delete');\n  //             return;\n  //         }\n  //         this.highlightNode(this.tree.root).then(() => {\n  //             this.tree.root = null;\n  //             this.renderrbTree(this.tree.root);\n  //         });\n  //     }\n\n  setTemplate() {\n    const actionsContainer = document.querySelector(this.actionsContainerSelector);\n    actionsContainer.innerHTML = this.template();\n  }\n\n  //       renderrbTree(\n  //         node = this.tree.root,\n  //         containerSelector = this.treeContainerSelector\n  //     ) {\n  //         const treeContainer = document.querySelector(containerSelector);\n  //         if (!node) {\n  //             return (treeContainer.innerHTML = '');\n  //         }\n  //         const template = this.getrbTreeUI(node);\n  //         treeContainer.innerHTML = template;\n\n  //         // Add event listeners or additional styling logic here if needed\n  //     }\n\n  //     getrbTreeUI(node) {\n  //         const { left, right, value, color } = node;\n  //         if (!node) {\n  //             return '';\n  //         }\n\n  //         // Determine the color class based on the node's color attribute\n  //         const colorClass = color ? color.toLowerCase() : '';\n\n  //         return `\n  //             <div class=\"node__element ${colorClass}\" data-node-id=\"${value}\">${value}</div>\n  //             ${\n  //                 left || right\n  //                     ? `\n  //                         <div class=\"node__bottom-line\"></div>\n  //                         <div class=\"node__children\">\n  //                             <div class=\"node node--left\">\n  //                                 ${left ? this.getrbTreeUI(left) : ''}\n  //                             </div>\n  //                             <div class=\"node node--right\">\n  //                                 ${right ? this.getrbTreeUI(right) : ''}\n  //                             </div>\n  //                         </div>\n  //                     `\n  //                     : ''\n  //             }\n  //         `;\n  //     }\n}\nclass TrieNode {\n  constructor() {\n    this.children = {};\n    this.isEndofword = false;\n  }\n}\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n  insert(word) {\n    let currentnode = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!currentnode.children[char]) {\n        currentnode.children[char] = new TrieNode();\n      }\n      currentnode = currentnode.children[char];\n    }\n    currentnode.isEndofword = true;\n  }\n  search(word) {\n    let currentnode = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!currentnode.children[char]) {\n        return false;\n      }\n      currentnode = currentnode.children[char];\n    }\n    return currentnode.isEndofword;\n  }\n}\nclass TrieRenderer {\n  constructor() {\n    this.trieContainerSelector = '#trie-container';\n  }\n  getTrieUI(node, value = '') {\n    const {\n      children\n    } = node;\n    if (!node) {\n      return '';\n    }\n    let childrenUI = '';\n    for (const char in children) {\n      if (children.hasOwnProperty(char)) {\n        childrenUI += this.getTrieUI(children[char], char);\n      }\n    }\n    return `\n            <div class=\"node__element\" data-node-id=\"${value}\">${value}</div>\n            ${childrenUI ? `\n                    <div class=\"node__bottom-line\"></div>\n                    <div class=\"node__children\">\n                        ${childrenUI}\n                    </div>\n                    ` : ''}\n        `;\n  }\n  renderTrie(node = this.trie.root) {\n    const trieContainer = document.querySelector(this.trieContainerSelector);\n    if (!node) {\n      return trieContainer.innerHTML = '';\n    }\n    const template = this.getTrieUI(node);\n    trieContainer.innerHTML = template;\n  }\n}","map":{"version":3,"names":["RBTreeUI","constructor","treeContainerSelector","actionsContainerSelector","onInsertTrieClick","element","promptAsync","trie","insert","renderTrie","root","template","init","setTemplate","document","querySelector","removeElementBtn","delBtn","addEventListener","onInsertrbClick","bind","onRemoverbClick","onResetrbClick","promptMessage","Promise","resolve","prompt","actionsContainer","innerHTML","TrieNode","children","isEndofword","Trie","word","currentnode","i","length","char","search","TrieRenderer","trieContainerSelector","getTrieUI","node","value","childrenUI","hasOwnProperty","trieContainer"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/RB/rb-ui.js"],"sourcesContent":["// // import BinarySearchTreeUI from '../BST/bst-ui';\n// import _ from 'lodash';\n// // import RedBlackTree from './rb';\n\n  export default class RBTreeUI{\n    // balancePreviewVisible = true;\n    // balancedTree;\n    // constructor() {\n    //   super(...arguments);\n    //   this.tree = new RedBlackTree();\n      treeContainerSelector = '.rb-tree';\n      actionsContainerSelector = '.rb-actions-container';\n    \n    template() {\n        return `\n        <div class=\"btn-group\">\n          <button id=\"insertrbnode\" class=\"btn btn-warning\">\n            Insert Node\n          </button>\n          <button id=\"removerbnode\" class=\"btn btn-dark\">\n            Remove Node\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button id=\"deleterbtree\" class=\"btn btn-danger\">\n            Delete Tree\n          </button>\n        </div>\n          <div class=\"btn-group\">\n            <button id=\"PreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\n              Hide Balance Tree Preview\n            </button>\n          </div>\n        `;\n      }\n\n      init() {\n        this.setTemplate();\n        const insert = document.querySelector('#insertrbnode');\n        const removeElementBtn = document.querySelector('#removerbnode');\n        const delBtn = document.querySelector('#deleterbtree');\n        // const toggleBalancePreviewBtn = document.querySelector('#PreviewBtn');\n        insert.addEventListener('click', this.onInsertrbClick.bind(this));\n        removeElementBtn.addEventListener('click', this.onRemoverbClick.bind(this));\n        delBtn.addEventListener('click', this.onResetrbClick.bind(this));\n        // toggleBalancePreviewBtn.addEventListener('click', () => {this.resetBalancedTreeView();});\n      }\n      onInsertTrieClick = async () => {\n        const element = await this.promptAsync('Enter word to insert into the trie');\n        if (!element) {\n            return;\n        }\n    \n        this.trie.insert(element);\n        this.renderTrie(this.trie.root);\n    }\n    \n    promptAsync(promptMessage) {\n        return new Promise(resolve => {\n            const element = prompt(promptMessage);\n            resolve(element);\n        });\n    }\n    \n      \n//     onRemoverbClick() {\n//         const element = prompt('Enter element to remove from the tree');\n//         if (!element) {\n//             return;\n//         }\n//         const elementExists = this.tree.search(element);\n//         if (!elementExists) {\n//             alert('Element not found');\n//             return;\n//         }\n\n//         // Use remove instead of removerb\n//         const removedEl = this.tree.remove(element);\n//         if (removedEl) {\n//             this.highlightNode(removedEl).then(() => {\n//                 this.render(this.tree.root);\n//             });\n//         }\n//     }\n\n//     onResetrbClick() {\n//         if (!this.tree.root) {\n//             alert('Create a tree to delete');\n//             return;\n//         }\n//         this.highlightNode(this.tree.root).then(() => {\n//             this.tree.root = null;\n//             this.renderrbTree(this.tree.root);\n//         });\n//     }\n\n      setTemplate() {\n        const actionsContainer = document.querySelector(\n          this.actionsContainerSelector\n        );\n        actionsContainer.innerHTML = this.template();\n      }\n\n//       renderrbTree(\n//         node = this.tree.root,\n//         containerSelector = this.treeContainerSelector\n//     ) {\n//         const treeContainer = document.querySelector(containerSelector);\n//         if (!node) {\n//             return (treeContainer.innerHTML = '');\n//         }\n//         const template = this.getrbTreeUI(node);\n//         treeContainer.innerHTML = template;\n    \n//         // Add event listeners or additional styling logic here if needed\n//     }\n    \n//     getrbTreeUI(node) {\n//         const { left, right, value, color } = node;\n//         if (!node) {\n//             return '';\n//         }\n    \n//         // Determine the color class based on the node's color attribute\n//         const colorClass = color ? color.toLowerCase() : '';\n    \n//         return `\n//             <div class=\"node__element ${colorClass}\" data-node-id=\"${value}\">${value}</div>\n//             ${\n//                 left || right\n//                     ? `\n//                         <div class=\"node__bottom-line\"></div>\n//                         <div class=\"node__children\">\n//                             <div class=\"node node--left\">\n//                                 ${left ? this.getrbTreeUI(left) : ''}\n//                             </div>\n//                             <div class=\"node node--right\">\n//                                 ${right ? this.getrbTreeUI(right) : ''}\n//                             </div>\n//                         </div>\n//                     `\n//                     : ''\n//             }\n//         `;\n//     }\n    \n    \n\n\n\n}\n\nclass TrieNode {\n    constructor() {\n    this. children = {};\n    this.isEndofword = false;\n    }\n}\n\nclass Trie{\n    constructor() {\n        this.root=new TrieNode();\n        \n    }\n    insert(word)\n    {\n        let currentnode=this.root;\n        for(let i=0;i<word.length;i++)\n        {\n            const char=word[i];\n            if(!currentnode.children[char])\n            {\n                currentnode.children[char]=new TrieNode();\n            }\n            currentnode=currentnode.children[char];\n        }\n        currentnode.isEndofword=true;\n        \n    }\n    search(word)\n    {\n        let currentnode=this.root;\n        for(let i=0;i<word.length;i++)\n        {\n            const char=word[i];\n            if(!currentnode.children[char])\n            {\n                return false;\n            }\n            currentnode=currentnode.children[char];\n        }\n        return currentnode.isEndofword;\n\n    }\n}\n\nclass TrieRenderer {\n    constructor() {\n        this.trieContainerSelector = '#trie-container';\n    }\n\n    getTrieUI(node, value = '') {\n        const { children } = node;\n\n        if (!node) {\n            return '';\n        }\n\n        let childrenUI = '';\n        for (const char in children) {\n            if (children.hasOwnProperty(char)) {\n                childrenUI += this.getTrieUI(children[char], char);\n            }\n        }\n\n        return `\n            <div class=\"node__element\" data-node-id=\"${value}\">${value}</div>\n            ${\n                childrenUI\n                    ? `\n                    <div class=\"node__bottom-line\"></div>\n                    <div class=\"node__children\">\n                        ${childrenUI}\n                    </div>\n                    `\n                    : ''\n            }\n        `;\n    }\n\n    renderTrie(node = this.trie.root) {\n        const trieContainer = document.querySelector(this.trieContainerSelector);\n        if (!node) {\n            return (trieContainer.innerHTML = '');\n        }\n        const template = this.getTrieUI(node);\n        trieContainer.innerHTML = template;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}