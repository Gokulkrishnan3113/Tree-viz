{"ast":null,"code":"import BinarySearchTree from \"../BST/js_binary_search_tree\";\nconst BLACK = 'BLACK';\nconst RED = 'RED';\nclass Node {\n  constructor(data, color = RED) {\n    this.data = data;\n    this.color = color;\n    this.left = null;\n    this.right = null;\n    this.parent = null;\n  }\n  isLeftChild() {\n    return this.parent && this.parent.left === this;\n  }\n  flipColor() {\n    this.color = this.color === BLACK ? RED : BLACK;\n  }\n}\nclass RedBlackTree extends BinarySearchTree {\n  constructor() {\n    super();\n  }\n  insert(data) {\n    console.log(\"afterinsertcall\" + data);\n    const node = new Node(data, RED);\n    this.root = this._insert(this.root, node);\n    this._recolorAndRotate(node);\n  }\n  _insert(currentNode, newNode) {\n    if (currentNode === null) {\n      return newNode;\n    }\n    if (newNode.data < currentNode.data) {\n      currentNode.left = this._insert(currentNode.left, newNode);\n      currentNode.left.parent = currentNode;\n    } else if (newNode.data > currentNode.data) {\n      currentNode.right = this._insert(currentNode.right, newNode);\n      currentNode.right.parent = currentNode;\n    }\n    return currentNode;\n  }\n  _recolorAndRotate(node) {\n    const parent = node.parent;\n    if (node !== this.root && parent.color === RED) {\n      const grandParent = parent.parent;\n      const uncle = parent.isLeftChild() ? grandParent.right : grandParent.left;\n      if (uncle !== null && uncle.color === RED) {\n        this._handleRecoloring(parent, uncle, grandParent);\n      } else if (parent.isLeftChild()) {\n        this._handleLeftSituations(node, parent, grandParent);\n      } else {\n        this._handleRightSituations(node, parent, grandParent);\n      }\n    }\n    this.root.color = BLACK;\n  }\n  _handleRightSituations(node, parent, grandParent) {\n    if (node.isLeftChild()) {\n      this._rotateRight(parent);\n    }\n    parent.flipColor();\n    grandParent.flipColor();\n    this._rotateLeft(grandParent);\n    this._recolorAndRotate(node.isLeftChild() ? grandParent : parent);\n  }\n  _handleLeftSituations(node, parent, grandParent) {\n    if (!node.isLeftChild()) {\n      this._rotateLeft(parent);\n    }\n    parent.flipColor();\n    grandParent.flipColor();\n    this._rotateRight(grandParent);\n    this._recolorAndRotate(node.isLeftChild() ? parent : grandParent);\n  }\n  _handleRecoloring(parent, uncle, grandParent) {\n    uncle.flipColor();\n    parent.flipColor();\n    grandParent.flipColor();\n    this._recolorAndRotate(grandParent);\n  }\n  _rotateRight(node) {\n    const leftNode = node.left;\n    node.left = leftNode.right;\n    if (node.left !== null) {\n      node.left.parent = node;\n    }\n    leftNode.right = node;\n    leftNode.parent = node.parent;\n    this._updateChildrenOfParentNode(node, leftNode);\n    node.parent = leftNode;\n  }\n  _rotateLeft(node) {\n    const rightNode = node.right;\n    node.right = rightNode.left;\n    if (node.right !== null) {\n      node.right.parent = node;\n    }\n    rightNode.left = node;\n    rightNode.parent = node.parent;\n    this._updateChildrenOfParentNode(node, rightNode);\n    node.parent = rightNode;\n  }\n  _updateChildrenOfParentNode(node, tempNode) {\n    if (node.parent === null) {\n      this.root = tempNode;\n    } else if (node.isLeftChild()) {\n      node.parent.left = tempNode;\n    } else {\n      node.parent.right = tempNode;\n    }\n  }\n  traverse() {\n    this._traverseInOrder(this.root);\n  }\n  _traverseInOrder(node) {\n    if (node !== null) {\n      this._traverseInOrder(node.left);\n      console.log(node.data);\n      this._traverseInOrder(node.right);\n    }\n  }\n  getMax() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    return this._getMax(this.root);\n  }\n  _getMax(node) {\n    if (node.right !== null) {\n      return this._getMax(node.right);\n    }\n    return node.data;\n  }\n  getMin() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    return this._getMin(this.root);\n  }\n  _getMin(node) {\n    if (node.left !== null) {\n      return this._getMin(node.left);\n    }\n    return node.data;\n  }\n  isEmpty() {\n    return this.root === null;\n  }\n}\nexport default RedBlackTree;","map":{"version":3,"names":["BinarySearchTree","BLACK","RED","Node","constructor","data","color","left","right","parent","isLeftChild","flipColor","RedBlackTree","insert","console","log","node","root","_insert","_recolorAndRotate","currentNode","newNode","grandParent","uncle","_handleRecoloring","_handleLeftSituations","_handleRightSituations","_rotateRight","_rotateLeft","leftNode","_updateChildrenOfParentNode","rightNode","tempNode","traverse","_traverseInOrder","getMax","isEmpty","_getMax","getMin","_getMin"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/RB/rb.js"],"sourcesContent":["import BinarySearchTree from \"../BST/js_binary_search_tree\";\nconst BLACK = 'BLACK';\nconst RED = 'RED';\n\nclass Node {\n    constructor(data, color = RED) {\n        this.data = data;\n        this.color = color;\n        this.left = null;\n        this.right = null;\n        this.parent = null;\n    }\n\n\n  isLeftChild() {\n      return this.parent && this.parent.left === this;\n  }\n\n  flipColor() {\n      this.color = this.color === BLACK ? RED : BLACK;\n  }\n}\n\nclass RedBlackTree extends BinarySearchTree{\n  constructor() {\n    super();\n  }\n\n  insert(data) {\n    console.log(\"afterinsertcall\"+data);\n      const node = new Node(data, RED);\n      this.root = this._insert(this.root, node);\n      this._recolorAndRotate(node);\n  }\n\n  _insert(currentNode, newNode) {\n      if (currentNode === null) {\n          return newNode;\n      }\n\n      if (newNode.data < currentNode.data) {\n          currentNode.left = this._insert(currentNode.left, newNode);\n          currentNode.left.parent = currentNode;\n      } else if (newNode.data > currentNode.data) {\n          currentNode.right = this._insert(currentNode.right, newNode);\n          currentNode.right.parent = currentNode;\n      }\n\n      return currentNode;\n  }\n\n  _recolorAndRotate(node) {\n      const parent = node.parent;\n      if (node !== this.root && parent.color === RED) {\n          const grandParent = parent.parent;\n          const uncle = parent.isLeftChild() ? grandParent.right : grandParent.left;\n\n          if (uncle !== null && uncle.color === RED) {\n              this._handleRecoloring(parent, uncle, grandParent);\n          } else if (parent.isLeftChild()) {\n              this._handleLeftSituations(node, parent, grandParent);\n          } else {\n              this._handleRightSituations(node, parent, grandParent);\n          }\n      }\n\n      this.root.color = BLACK;\n  }\n\n  _handleRightSituations(node, parent, grandParent) {\n      if (node.isLeftChild()) {\n          this._rotateRight(parent);\n      }\n      parent.flipColor();\n      grandParent.flipColor();\n      this._rotateLeft(grandParent);\n      this._recolorAndRotate(node.isLeftChild() ? grandParent : parent);\n  }\n\n  _handleLeftSituations(node, parent, grandParent) {\n      if (!node.isLeftChild()) {\n          this._rotateLeft(parent);\n      }\n      parent.flipColor();\n      grandParent.flipColor();\n      this._rotateRight(grandParent);\n      this._recolorAndRotate(node.isLeftChild() ? parent : grandParent);\n  }\n\n  _handleRecoloring(parent, uncle, grandParent) {\n      uncle.flipColor();\n      parent.flipColor();\n      grandParent.flipColor();\n      this._recolorAndRotate(grandParent);\n  }\n\n  _rotateRight(node) {\n      const leftNode = node.left;\n      node.left = leftNode.right;\n\n      if (node.left !== null) {\n          node.left.parent = node;\n      }\n\n      leftNode.right = node;\n      leftNode.parent = node.parent;\n      this._updateChildrenOfParentNode(node, leftNode);\n      node.parent = leftNode;\n  }\n\n  _rotateLeft(node) {\n      const rightNode = node.right;\n      node.right = rightNode.left;\n\n      if (node.right !== null) {\n          node.right.parent = node;\n      }\n\n      rightNode.left = node;\n      rightNode.parent = node.parent;\n      this._updateChildrenOfParentNode(node, rightNode);\n      node.parent = rightNode;\n  }\n\n  _updateChildrenOfParentNode(node, tempNode) {\n      if (node.parent === null) {\n          this.root = tempNode;\n      } else if (node.isLeftChild()) {\n          node.parent.left = tempNode;\n      } else {\n          node.parent.right = tempNode;\n      }\n  }\n\n  traverse() {\n      this._traverseInOrder(this.root);\n  }\n\n  _traverseInOrder(node) {\n      if (node !== null) {\n          this._traverseInOrder(node.left);\n          console.log(node.data);\n          this._traverseInOrder(node.right);\n      }\n  }\n\n  getMax() {\n      if (this.isEmpty()) {\n          return null;\n      }\n      return this._getMax(this.root);\n  }\n\n  _getMax(node) {\n      if (node.right !== null) {\n          return this._getMax(node.right);\n      }\n      return node.data;\n  }\n\n  getMin() {\n      if (this.isEmpty()) {\n          return null;\n      }\n      return this._getMin(this.root);\n  }\n\n  _getMin(node) {\n      if (node.left !== null) {\n          return this._getMin(node.left);\n      }\n      return node.data;\n  }\n\n  isEmpty() {\n      return this.root === null;\n  }\n}\nexport default RedBlackTree;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}