{"ast":null,"code":"class Node {\n  constructor(data) {\n    this.value = data;\n    this.left = null;\n    this.right = null;\n    this.colour = 'R';\n    this.parent = null;\n  }\n}\nclass RedBlackTree {\n  constructor() {\n    this.root = null;\n    this.ll = false; // Left-Left Rotation flag\n    this.rr = false; // Right-Right Rotation flag\n    this.lr = false; // Left-Right Rotation flag\n    this.rl = false; // Right-Left Rotation flag\n  }\n\n  // Function to perform left rotation\n  rotateLeft(node) {\n    const x = node.right;\n    const y = x.left;\n    x.left = node;\n    node.right = y;\n    node.parent = x;\n    if (y !== null) y.parent = node;\n    return x;\n  }\n\n  // Function to perform right rotation\n  rotateRight(node) {\n    const x = node.left;\n    const y = x.right;\n    x.right = node;\n    node.left = y;\n    node.parent = x;\n    if (y !== null) y.parent = node;\n    return x;\n  }\n\n  // Helper function for insertion\n  insertHelp(root, data) {\n    let f = false;\n    if (root === null) return new Node(data);else if (data < root.data) {\n      root.left = this.insertHelp(root.left, data);\n      root.left.parent = root;\n      if (root !== this.root) {\n        if (root.colour === 'R' && root.left.colour === 'R') f = true;\n      }\n    } else {\n      root.right = this.insertHelp(root.right, data);\n      root.right.parent = root;\n      if (root !== this.root) {\n        if (root.colour === 'R' && root.right.colour === 'R') f = true;\n      }\n    }\n\n    // Rotate and recolor based on flags\n    if (this.ll) {\n      root = this.rotateLeft(root);\n      root.colour = 'B';\n      root.left.colour = 'R';\n      this.ll = false;\n    } else if (this.rr) {\n      root = this.rotateRight(root);\n      root.colour = 'B';\n      root.right.colour = 'R';\n      this.rr = false;\n    } else if (this.rl) {\n      root.right = this.rotateRight(root.right);\n      root.right.parent = root;\n      root = this.rotateLeft(root);\n      root.colour = 'B';\n      root.left.colour = 'R';\n      this.rl = false;\n    } else if (this.lr) {\n      root.left = this.rotateLeft(root.left);\n      root.left.parent = root;\n      root = this.rotateRight(root);\n      root.colour = 'B';\n      root.right.colour = 'R';\n      this.lr = false;\n    }\n\n    // Handle RED-RED conflict\n    if (f) {\n      if (root.parent.right === root) {\n        if (root.parent.left === null || root.parent.left.colour === 'B') {\n          if (root.left !== null && root.left.colour === 'R') this.rl = true;else if (root.right !== null && root.right.colour === 'R') this.ll = true;\n        } else {\n          root.parent.left.colour = 'B';\n          root.colour = 'B';\n          if (root.parent !== this.root) root.parent.colour = 'R';\n        }\n      } else {\n        if (root.parent.right === null || root.parent.right.colour === 'B') {\n          if (root.left !== null && root.left.colour === 'R') this.rr = true;else if (root.right !== null && root.right.colour === 'R') this.lr = true;\n        } else {\n          root.parent.right.colour = 'B';\n          root.colour = 'B';\n          if (root.parent !== this.root) root.parent.colour = 'R';\n        }\n      }\n      f = false;\n    }\n    return root;\n  }\n\n  // Public method to insert data into the tree\n  rbinsert(data) {\n    if (this.root === null) {\n      this.root = new Node(data);\n      this.root.colour = 'B';\n    } else this.root = this.insertHelp(this.root, data);\n  }\n\n  // Inorder traversal helper function\n  inorderTraversalHelper(node) {\n    if (node !== null) {\n      this.inorderTraversalHelper(node.left);\n      document.write(node.data);\n      this.inorderTraversalHelper(node.right);\n    }\n  }\n\n  // Public method to perform inorder traversal\n  inorderTraversal() {\n    this.inorderTraversalHelper(this.root);\n  }\n  search(value) {\n    return this.postOrderTraverse().find(node => node.value === value);\n  }\n  postOrderTraverse(node = this.root, traversed = []) {\n    if (node === null) {\n      return traversed;\n    }\n    if (node.left) {\n      traversed.push(...this.postOrderTraverse(node.left));\n    }\n    if (node.right) {\n      traversed.push(...this.postOrderTraverse(node.right));\n    }\n    traversed.push(node);\n    return traversed;\n  }\n}\nexport default RedBlackTree;","map":{"version":3,"names":["Node","constructor","data","value","left","right","colour","parent","RedBlackTree","root","ll","rr","lr","rl","rotateLeft","node","x","y","rotateRight","insertHelp","f","rbinsert","inorderTraversalHelper","document","write","inorderTraversal","search","postOrderTraverse","find","traversed","push"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/RB/rb.js"],"sourcesContent":["class Node {\n\tconstructor(data) {\n\t\tthis.value = data;\n\t\tthis.left = null;\n\t\tthis.right = null;\n\t\tthis.colour = 'R';\n\t\tthis.parent = null;\n\t}\n}\n\nclass RedBlackTree {\n\tconstructor() {\n\t\tthis.root = null;\n\t\tthis.ll = false; // Left-Left Rotation flag\n\t\tthis.rr = false; // Right-Right Rotation flag\n\t\tthis.lr = false; // Left-Right Rotation flag\n\t\tthis.rl = false; // Right-Left Rotation flag\n\t}\n\n\t// Function to perform left rotation\n\trotateLeft(node) {\n\t\tconst x = node.right;\n\t\tconst y = x.left;\n\t\tx.left = node;\n\t\tnode.right = y;\n\t\tnode.parent = x;\n\n\t\tif (y !== null)\n\t\t\ty.parent = node;\n\n\t\treturn x;\n\t}\n\n\t// Function to perform right rotation\n\trotateRight(node) {\n\t\tconst x = node.left;\n\t\tconst y = x.right;\n\t\tx.right = node;\n\t\tnode.left = y;\n\t\tnode.parent = x;\n\n\t\tif (y !== null)\n\t\t\ty.parent = node;\n\n\t\treturn x;\n\t}\n\n\t// Helper function for insertion\n\tinsertHelp(root, data) {\n\t\tlet f = false;\n\n\t\tif (root === null)\n\t\t\treturn new Node(data);\n\t\telse if (data < root.data) {\n\t\t\troot.left = this.insertHelp(root.left, data);\n\t\t\troot.left.parent = root;\n\n\t\t\tif (root !== this.root) {\n\t\t\t\tif (root.colour === 'R' && root.left.colour === 'R')\n\t\t\t\t\tf = true;\n\t\t\t}\n\t\t} else {\n\t\t\troot.right = this.insertHelp(root.right, data);\n\t\t\troot.right.parent = root;\n\n\t\t\tif (root !== this.root) {\n\t\t\t\tif (root.colour === 'R' && root.right.colour === 'R')\n\t\t\t\t\tf = true;\n\t\t\t}\n\t\t}\n\n\t\t// Rotate and recolor based on flags\n\t\tif (this.ll) {\n\t\t\troot = this.rotateLeft(root);\n\t\t\troot.colour = 'B';\n\t\t\troot.left.colour = 'R';\n\t\t\tthis.ll = false;\n\t\t} else if (this.rr) {\n\t\t\troot = this.rotateRight(root);\n\t\t\troot.colour = 'B';\n\t\t\troot.right.colour = 'R';\n\t\t\tthis.rr = false;\n\t\t} else if (this.rl) {\n\t\t\troot.right = this.rotateRight(root.right);\n\t\t\troot.right.parent = root;\n\t\t\troot = this.rotateLeft(root);\n\t\t\troot.colour = 'B';\n\t\t\troot.left.colour = 'R';\n\t\t\tthis.rl = false;\n\t\t} else if (this.lr) {\n\t\t\troot.left = this.rotateLeft(root.left);\n\t\t\troot.left.parent = root;\n\t\t\troot = this.rotateRight(root);\n\t\t\troot.colour = 'B';\n\t\t\troot.right.colour = 'R';\n\t\t\tthis.lr = false;\n\t\t}\n\n\t\t// Handle RED-RED conflict\n\t\tif (f) {\n\t\t\tif (root.parent.right === root) {\n\t\t\t\tif (root.parent.left === null || root.parent.left.colour === 'B') {\n\t\t\t\t\tif (root.left !== null && root.left.colour === 'R')\n\t\t\t\t\t\tthis.rl = true;\n\t\t\t\t\telse if (root.right !== null && root.right.colour === 'R')\n\t\t\t\t\t\tthis.ll = true;\n\t\t\t\t} else {\n\t\t\t\t\troot.parent.left.colour = 'B';\n\t\t\t\t\troot.colour = 'B';\n\t\t\t\t\tif (root.parent !== this.root)\n\t\t\t\t\t\troot.parent.colour = 'R';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (root.parent.right === null || root.parent.right.colour === 'B') {\n\t\t\t\t\tif (root.left !== null && root.left.colour === 'R')\n\t\t\t\t\t\tthis.rr = true;\n\t\t\t\t\telse if (root.right !== null && root.right.colour === 'R')\n\t\t\t\t\t\tthis.lr = true;\n\t\t\t\t} else {\n\t\t\t\t\troot.parent.right.colour = 'B';\n\t\t\t\t\troot.colour = 'B';\n\t\t\t\t\tif (root.parent !== this.root)\n\t\t\t\t\t\troot.parent.colour = 'R';\n\t\t\t\t}\n\t\t\t}\n\t\t\tf = false;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t// Public method to insert data into the tree\n\trbinsert(data) {\n\t\tif (this.root === null) {\n\t\t\tthis.root = new Node(data);\n\t\t\tthis.root.colour = 'B';\n\t\t} else\n\t\t\tthis.root = this.insertHelp(this.root, data);\n\t}\n\n\t// Inorder traversal helper function\n\tinorderTraversalHelper(node) {\n\t\tif (node !== null) {\n\t\t\tthis.inorderTraversalHelper(node.left);\n\t\t\tdocument.write(node.data);\n\t\t\t\n\t\t\tthis.inorderTraversalHelper(node.right);\n\t\t}\n\t\t\n\t}\n\n\t// Public method to perform inorder traversal\n\tinorderTraversal() {\n\t\tthis.inorderTraversalHelper(this.root);\n\t}\n\n\n  search(value) {\n    return this.postOrderTraverse().find((node) => node.value === value);\n  }\n  postOrderTraverse(node = this.root, traversed = []) {\n    if (node === null) {\n      return traversed;\n    }\n    if (node.left) {\n      traversed.push(...this.postOrderTraverse(node.left));\n    }\n    if (node.right) {\n      traversed.push(...this.postOrderTraverse(node.right));\n    }\n    traversed.push(node);\n    return traversed;\n  }\n}\nexport default RedBlackTree;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}