{"ast":null,"code":"import BinarySearchTree from './BST/js_binary_search_tree';\nimport BinarySearchTreeUI from './BST/bst-ui';\nconst colors = ['#D6FFB7', '#F5FF90', '#FFC15E', '#FF9F1C', '#2AFC98'];\nexport default class AVLTreeUI extends BinarySearchTreeUI {\n  constructor() {\n    super(...arguments);\n    this.balancePreviewVisible = true;\n    this.treeContainerSelector = '.avl-tree';\n    this.actionsContainerSelector = '.avl-actions-container';\n  }\n  resetBalancedTreeView() {\n    if (!this.balancedTree) {\n      return;\n    }\n    const toggleBalancePreviewBtn = document.querySelector('#switchPreviewBtn');\n    this.tree = _.clone(this.balancedTree);\n    this.balancedTree = null;\n    this.hideBalancePreview();\n    this.render(this.tree.root);\n    toggleBalancePreviewBtn.setAttribute('hidden', true);\n    document.querySelectorAll('button').forEach(btn => {\n      btn.removeAttribute('disabled');\n    });\n  }\n  init() {\n    super.init();\n    const toggleBalancePreviewBtn = document.querySelector('#switchPreviewBtn');\n    toggleBalancePreviewBtn.addEventListener('click', () => {\n      this.resetBalancedTreeView();\n    });\n  }\n  template() {\n    let baseTemplate = super.template();\n    baseTemplate += `\n      <div class=\"btn-group\">\n        <button id=\"switchPreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\n          Hide Balance Tree Preview\n        </button>\n      </div>\n    `;\n    return baseTemplate;\n  }\n  onInsertBtnClick() {\n    const element = prompt('Enter element to insert into the tree');\n    const bst = new BinarySearchTree();\n    bst.root = _.cloneDeep(this.tree).root;\n    const insertedEl = this.tree.insert(element);\n    if (this.balancePreviewVisible) {\n      this.balancedTree = _.cloneDeep(this.tree);\n    }\n    if (insertedEl) {\n      if (!this.balancePreviewVisible) {\n        this.render(this.tree.root);\n        this.hideBalancePreview();\n        this.highlightNode(insertedEl);\n      } else {\n        bst.insert(element);\n        this.render(bst.root);\n        this.showBalancePreview(this.balancedTree, bst);\n      }\n    } else {\n      alert('Element already exists');\n    }\n  }\n  onRemoveElementBtnClick() {\n    const element = prompt('Enter element to remove from the tree');\n    let removedEl;\n    if (this.balancePreviewVisible) {\n      this.balancedTree = _.cloneDeep(this.tree);\n      removedEl = this.balancedTree.remove(element);\n    } else {\n      removedEl = this.tree.remove(element);\n      this.balancedTree = null;\n    }\n    if (removedEl) {\n      this.highlightNode(removedEl).then(() => {\n        if (!this.balancePreviewVisible) {\n          this.render(this.tree.root);\n          this.hideBalancePreview();\n        } else {\n          this.showBalancePreview(this.balancedTree);\n        }\n      });\n    } else {\n      alert('Element not found');\n    }\n  }\n  hideBalancePreview() {\n    const selector = '.avl-tree-clone';\n    const treeContainer = document.querySelector(selector);\n    treeContainer.innerHTML = '';\n  }\n  disableAllBtnsExceptPreview() {\n    const allButtons = document.querySelectorAll('button');\n    allButtons.forEach(btn => {\n      if (btn.getAttribute('id') === 'switchPreviewBtn') {\n        btn.removeAttribute('hidden');\n      } else {\n        btn.setAttribute('disabled', true);\n      }\n    });\n  }\n  showBalancePreview(clone, tree = this.tree) {\n    this.disableAllBtnsExceptPreview();\n    const selector = '.avl-tree-clone';\n    const treeContainer = document.querySelector(selector);\n    this.renderTree(clone.root, selector);\n    treeContainer.innerHTML = `<div style=\"margin-bottom:30px;\">Balanced Tree</div>${treeContainer.innerHTML}`;\n    const cloneTree = clone.inOrderTraverse();\n    const colorsHash = {};\n    let index = 0;\n    for (const current of cloneTree) {\n      const match = tree.search(current.value);\n      if (!match) {\n        continue;\n      }\n      if (match.left !== current.left || match.right !== current.right) {\n        colorsHash[current.value] = colors[index];\n        index++;\n      }\n    }\n    for (const key in colorsHash) {\n      const elements = document.querySelectorAll(`[data-node-id=\"${key}\"]`);\n      elements.forEach(el => {\n        el.style.backgroundColor = colorsHash[key];\n      });\n    }\n  }\n}","map":{"version":3,"names":["BinarySearchTree","BinarySearchTreeUI","colors","AVLTreeUI","constructor","arguments","balancePreviewVisible","treeContainerSelector","actionsContainerSelector","resetBalancedTreeView","balancedTree","toggleBalancePreviewBtn","document","querySelector","tree","_","clone","hideBalancePreview","render","root","setAttribute","querySelectorAll","forEach","btn","removeAttribute","init","addEventListener","template","baseTemplate","onInsertBtnClick","element","prompt","bst","cloneDeep","insertedEl","insert","highlightNode","showBalancePreview","alert","onRemoveElementBtnClick","removedEl","remove","then","selector","treeContainer","innerHTML","disableAllBtnsExceptPreview","allButtons","getAttribute","renderTree","cloneTree","inOrderTraverse","colorsHash","index","current","match","search","value","left","right","key","elements","el","style","backgroundColor"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/AVL/avl_tree_ui.js"],"sourcesContent":["import BinarySearchTree from './BST/js_binary_search_tree';\r\nimport BinarySearchTreeUI from './BST/bst-ui';\r\n\r\nconst colors = ['#D6FFB7', '#F5FF90', '#FFC15E', '#FF9F1C', '#2AFC98'];\r\n\r\nexport default class AVLTreeUI extends BinarySearchTreeUI {\r\n  balancePreviewVisible = true;\r\n  balancedTree;\r\n  constructor() {\r\n    super(...arguments);\r\n    this.treeContainerSelector = '.avl-tree';\r\n    this.actionsContainerSelector = '.avl-actions-container';\r\n  }\r\n\r\n  resetBalancedTreeView() {\r\n    if (!this.balancedTree) {\r\n      return;\r\n    }\r\n    const toggleBalancePreviewBtn = document.querySelector('#switchPreviewBtn');\r\n    this.tree = _.clone(this.balancedTree);\r\n    this.balancedTree = null;\r\n    this.hideBalancePreview();\r\n    this.render(this.tree.root);\r\n    toggleBalancePreviewBtn.setAttribute('hidden', true);\r\n    document.querySelectorAll('button').forEach((btn) => {\r\n      btn.removeAttribute('disabled');\r\n    });\r\n  }\r\n\r\n  init() {\r\n    super.init();\r\n    const toggleBalancePreviewBtn = document.querySelector('#switchPreviewBtn');\r\n\r\n    toggleBalancePreviewBtn.addEventListener('click', () => {\r\n      this.resetBalancedTreeView();\r\n    });\r\n  }\r\n\r\n  template() {\r\n    let baseTemplate = super.template();\r\n    baseTemplate += `\r\n      <div class=\"btn-group\">\r\n        <button id=\"switchPreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\r\n          Hide Balance Tree Preview\r\n        </button>\r\n      </div>\r\n    `;\r\n    return baseTemplate;\r\n  }\r\n\r\n  onInsertBtnClick() {\r\n    const element = prompt('Enter element to insert into the tree');\r\n    const bst = new BinarySearchTree();\r\n    bst.root = _.cloneDeep(this.tree).root;\r\n    const insertedEl = this.tree.insert(element);\r\n    if (this.balancePreviewVisible) {\r\n      this.balancedTree = _.cloneDeep(this.tree);\r\n    }\r\n    if (insertedEl) {\r\n      if (!this.balancePreviewVisible) {\r\n        this.render(this.tree.root);\r\n        this.hideBalancePreview();\r\n        this.highlightNode(insertedEl);\r\n      } else {\r\n        bst.insert(element);\r\n        this.render(bst.root);\r\n        this.showBalancePreview(this.balancedTree, bst);\r\n      }\r\n    } else {\r\n      alert('Element already exists');\r\n    }\r\n  }\r\n\r\n  onRemoveElementBtnClick() {\r\n    const element = prompt('Enter element to remove from the tree');\r\n    let removedEl;\r\n    if (this.balancePreviewVisible) {\r\n      this.balancedTree = _.cloneDeep(this.tree);\r\n      removedEl = this.balancedTree.remove(element);\r\n    } else {\r\n      removedEl = this.tree.remove(element);\r\n      this.balancedTree = null;\r\n    }\r\n    if (removedEl) {\r\n      this.highlightNode(removedEl).then(() => {\r\n        if (!this.balancePreviewVisible) {\r\n          this.render(this.tree.root);\r\n          this.hideBalancePreview();\r\n        } else {\r\n          this.showBalancePreview(this.balancedTree);\r\n        }\r\n      });\r\n    } else {\r\n      alert('Element not found');\r\n    }\r\n  }\r\n\r\n  hideBalancePreview() {\r\n    const selector = '.avl-tree-clone';\r\n    const treeContainer = document.querySelector(selector);\r\n    treeContainer.innerHTML = '';\r\n  }\r\n\r\n  disableAllBtnsExceptPreview() {\r\n    const allButtons = document.querySelectorAll('button');\r\n    allButtons.forEach((btn) => {\r\n      if (btn.getAttribute('id') === 'switchPreviewBtn') {\r\n        btn.removeAttribute('hidden');\r\n      } else {\r\n        btn.setAttribute('disabled', true);\r\n      }\r\n    });\r\n  }\r\n\r\n  showBalancePreview(clone, tree = this.tree) {\r\n    this.disableAllBtnsExceptPreview();\r\n    const selector = '.avl-tree-clone';\r\n    const treeContainer = document.querySelector(selector);\r\n    this.renderTree(clone.root, selector);\r\n    treeContainer.innerHTML = `<div style=\"margin-bottom:30px;\">Balanced Tree</div>${treeContainer.innerHTML}`;\r\n    const cloneTree = clone.inOrderTraverse();\r\n    const colorsHash = {};\r\n    let index = 0;\r\n    for (const current of cloneTree) {\r\n      const match = tree.search(current.value);\r\n      if (!match) {\r\n        continue;\r\n      }\r\n      if (match.left !== current.left || match.right !== current.right) {\r\n        colorsHash[current.value] = colors[index];\r\n        index++;\r\n      }\r\n    }\r\n    for (const key in colorsHash) {\r\n      const elements = document.querySelectorAll(`[data-node-id=\"${key}\"]`);\r\n      elements.forEach((el) => {\r\n        el.style.backgroundColor = colorsHash[key];\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}