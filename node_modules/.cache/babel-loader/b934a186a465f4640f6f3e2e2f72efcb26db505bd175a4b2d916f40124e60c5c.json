{"ast":null,"code":"import BinarySearchTree from \"../BST/js_binary_search_tree\";\nconst BLACK = 'BLACK';\nconst RED = 'RED';\nclass Node {\n  constructor(data, color = RED) {\n    this.value = data;\n    this.color = color;\n    this.left = null;\n    this.right = null;\n    this.parent = null;\n  }\n  isLeftChild() {\n    return this.parent && this.parent.left === this;\n  }\n  flipColor() {\n    this.color = this.color === BLACK ? RED : BLACK;\n  }\n}\nclass RedBlackTree extends BinarySearchTree {\n  constructor() {\n    super();\n  }\n  insert(data) {\n    const node = new Node(data);\n    this.root = this._insert(this.root, node);\n    this._recolorAndRotate(node);\n  }\n  _insert(currentNode, newNode) {\n    if (currentNode === null) {\n      return newNode;\n    }\n    if (newNode.data < currentNode.data) {\n      currentNode.left = this._insert(currentNode.left, newNode);\n      currentNode.left.parent = currentNode;\n    } else if (newNode.data > currentNode.data) {\n      currentNode.right = this._insert(currentNode.right, newNode);\n      currentNode.right.parent = currentNode;\n    }\n    return currentNode;\n  }\n  _recolorAndRotate(node) {\n    const par = node.parent;\n    //console.log(\"parent\"+par.value);\n    if (node !== this.root && par.color === RED) {\n      const grandParent = par.parent;\n      const uncle = par.isLeftChild() ? grandParent.right : grandParent.left;\n      if (uncle !== null && uncle.color === RED) {\n        this._handleRecoloring(par, uncle, grandParent);\n      } else if (par.isLeftChild()) {\n        this._handleLeftSituations(node, par, grandParent);\n      } else {\n        this._handleRightSituations(node, par, grandParent);\n      }\n    }\n    this.root.color = BLACK;\n  }\n  _handleRightSituations(node, parent, grandParent) {\n    if (node.isLeftChild()) {\n      this._rotateRight(parent);\n    }\n    parent.flipColor();\n    grandParent.flipColor();\n    this._rotateLeft(grandParent);\n    this._recolorAndRotate(node.isLeftChild() ? grandParent : parent);\n  }\n  _handleLeftSituations(node, parent, grandParent) {\n    if (!node.isLeftChild()) {\n      this._rotateLeft(parent);\n    }\n    parent.flipColor();\n    grandParent.flipColor();\n    this._rotateRight(grandParent);\n    this._recolorAndRotate(node.isLeftChild() ? parent : grandParent);\n  }\n  _handleRecoloring(parent, uncle, grandParent) {\n    uncle.flipColor();\n    parent.flipColor();\n    grandParent.flipColor();\n    this._recolorAndRotate(grandParent);\n  }\n  _rotateRight(node) {\n    const leftNode = node.left;\n    node.left = leftNode.right;\n    if (node.left !== null) {\n      node.left.parent = node;\n    }\n    leftNode.right = node;\n    leftNode.parent = node.parent;\n    this._updateChildrenOfParentNode(node, leftNode);\n    node.parent = leftNode;\n  }\n  _rotateLeft(node) {\n    const rightNode = node.right;\n    node.right = rightNode.left;\n    if (node.right !== null) {\n      node.right.parent = node;\n    }\n    rightNode.left = node;\n    rightNode.parent = node.parent;\n    this._updateChildrenOfParentNode(node, rightNode);\n    node.parent = rightNode;\n  }\n  _updateChildrenOfParentNode(node, tempNode) {\n    if (node.parent === null) {\n      this.root = tempNode;\n    } else if (node.isLeftChild()) {\n      node.parent.left = tempNode;\n    } else {\n      node.parent.right = tempNode;\n    }\n  }\n  traverse() {\n    this._traverseInOrder(this.root);\n  }\n  _traverseInOrder(node) {\n    if (node !== null) {\n      this._traverseInOrder(node.left);\n      console.log(node.data);\n      this._traverseInOrder(node.right);\n    }\n  }\n  getMax() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    return this._getMax(this.root);\n  }\n  _getMax(node) {\n    if (node.right !== null) {\n      return this._getMax(node.right);\n    }\n    return node.data;\n  }\n  getMin() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    return this._getMin(this.root);\n  }\n  _getMin(node) {\n    if (node.left !== null) {\n      return this._getMin(node.left);\n    }\n    return node.data;\n  }\n  isEmpty() {\n    return this.root === null;\n  }\n}\nexport default RedBlackTree;","map":{"version":3,"names":["BinarySearchTree","BLACK","RED","Node","constructor","data","color","value","left","right","parent","isLeftChild","flipColor","RedBlackTree","insert","node","root","_insert","_recolorAndRotate","currentNode","newNode","par","grandParent","uncle","_handleRecoloring","_handleLeftSituations","_handleRightSituations","_rotateRight","_rotateLeft","leftNode","_updateChildrenOfParentNode","rightNode","tempNode","traverse","_traverseInOrder","console","log","getMax","isEmpty","_getMax","getMin","_getMin"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/RB/rb.js"],"sourcesContent":["import BinarySearchTree from \"../BST/js_binary_search_tree\";\nconst BLACK = 'BLACK';\nconst RED = 'RED';\n\nclass Node {\n    constructor(data, color = RED) {\n        this.value = data;\n        this.color = color;\n        this.left = null;\n        this.right = null;\n        this.parent = null;\n    }\n\n\n  isLeftChild() {\n      return this.parent && this.parent.left === this;\n  }\n\n  flipColor() {\n      this.color = this.color === BLACK ? RED : BLACK;\n  }\n}\n\nclass RedBlackTree extends BinarySearchTree{\n  constructor() {\n    super();\n  }\n\n  insert(data) {\n    const node = new Node(data);\n    this.root = this._insert(this.root, node);\n    this._recolorAndRotate(node);\n}\n\n_insert(currentNode, newNode) {\n    if (currentNode === null) {\n        return newNode;\n    }\n\n    if (newNode.data < currentNode.data) {\n        currentNode.left = this._insert(currentNode.left, newNode);\n        currentNode.left.parent = currentNode;\n    } else if (newNode.data > currentNode.data) {\n        currentNode.right = this._insert(currentNode.right, newNode);\n        currentNode.right.parent = currentNode;\n    }\n\n    return currentNode;\n}\n\n_recolorAndRotate(node) {\n    const par = node.parent;\n    //console.log(\"parent\"+par.value);\n    if (node !== this.root && par.color === RED) {\n        const grandParent = par.parent;\n        const uncle = par.isLeftChild() ? grandParent.right : grandParent.left;\n\n        if (uncle !== null && uncle.color === RED) {\n            this._handleRecoloring(par, uncle, grandParent);\n        } else if (par.isLeftChild()) {\n            this._handleLeftSituations(node, par, grandParent);\n        } else {\n            this._handleRightSituations(node, par, grandParent);\n        }\n    }\n\n    this.root.color = BLACK;\n}\n\n  _handleRightSituations(node, parent, grandParent) {\n      if (node.isLeftChild()) {\n          this._rotateRight(parent);\n      }\n      parent.flipColor();\n      grandParent.flipColor();\n      this._rotateLeft(grandParent);\n      this._recolorAndRotate(node.isLeftChild() ? grandParent : parent);\n  }\n\n  _handleLeftSituations(node, parent, grandParent) {\n      if (!node.isLeftChild()) {\n          this._rotateLeft(parent);\n      }\n      parent.flipColor();\n      grandParent.flipColor();\n      this._rotateRight(grandParent);\n      this._recolorAndRotate(node.isLeftChild() ? parent : grandParent);\n  }\n\n  _handleRecoloring(parent, uncle, grandParent) {\n      uncle.flipColor();\n      parent.flipColor();\n      grandParent.flipColor();\n      this._recolorAndRotate(grandParent);\n  }\n\n  _rotateRight(node) {\n      const leftNode = node.left;\n      node.left = leftNode.right;\n\n      if (node.left !== null) {\n          node.left.parent = node;\n      }\n\n      leftNode.right = node;\n      leftNode.parent = node.parent;\n      this._updateChildrenOfParentNode(node, leftNode);\n      node.parent = leftNode;\n  }\n\n  _rotateLeft(node) {\n      const rightNode = node.right;\n      node.right = rightNode.left;\n\n      if (node.right !== null) {\n          node.right.parent = node;\n      }\n\n      rightNode.left = node;\n      rightNode.parent = node.parent;\n      this._updateChildrenOfParentNode(node, rightNode);\n      node.parent = rightNode;\n  }\n\n  _updateChildrenOfParentNode(node, tempNode) {\n      if (node.parent === null) {\n          this.root = tempNode;\n      } else if (node.isLeftChild()) {\n          node.parent.left = tempNode;\n      } else {\n          node.parent.right = tempNode;\n      }\n  }\n\n  traverse() {\n      this._traverseInOrder(this.root);\n  }\n\n  _traverseInOrder(node) {\n      if (node !== null) {\n          this._traverseInOrder(node.left);\n          console.log(node.data);\n          this._traverseInOrder(node.right);\n      }\n  }\n\n  getMax() {\n      if (this.isEmpty()) {\n          return null;\n      }\n      return this._getMax(this.root);\n  }\n\n  _getMax(node) {\n      if (node.right !== null) {\n          return this._getMax(node.right);\n      }\n      return node.data;\n  }\n\n  getMin() {\n      if (this.isEmpty()) {\n          return null;\n      }\n      return this._getMin(this.root);\n  }\n\n  _getMin(node) {\n      if (node.left !== null) {\n          return this._getMin(node.left);\n      }\n      return node.data;\n  }\n\n  isEmpty() {\n      return this.root === null;\n  }\n}\nexport default RedBlackTree;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}