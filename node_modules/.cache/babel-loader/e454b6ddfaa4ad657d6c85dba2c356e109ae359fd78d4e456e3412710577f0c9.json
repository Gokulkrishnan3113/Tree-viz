{"ast":null,"code":"class TrieNode {\n  constructor() {\n    this.children = {};\n    this.isEndofword = false;\n  }\n}\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n  insert(word) {\n    console.log(\"inside insert\" + word);\n    let currentnode = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!currentnode.children[char]) {\n        currentnode.children[char] = new TrieNode();\n      }\n      currentnode = currentnode.children[char];\n    }\n    currentnode.isEndofword = true;\n  }\n  search(word) {\n    let currentnode = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!currentnode.children[char]) {\n        return false;\n      }\n      currentnode = currentnode.children[char];\n    }\n    return currentnode.isEndofword;\n  }\n}\nclass TrieRenderer {\n  constructor(trieInstance) {\n    this.onInsertTrieClick = async () => {\n      const element = await this.promptAsync('Enter word to insert into the trie');\n      if (!element) {\n        return;\n      }\n      console.log(\"before call\" + element);\n      this.trie.insert(element);\n      this.renderTrie();\n    };\n    this.promptAsync = promptMessage => {\n      return new Promise(resolve => {\n        const userInput = prompt(promptMessage);\n        resolve(userInput);\n      });\n    };\n    this.renderTrie = () => {\n      const trieContainer = document.querySelector(this.trieContainerSelector);\n      trieContainer.innerHTML = this.getTrieUI(this.root);\n\n      // Add line breaks based on common prefixes\n      const nodes = trieContainer.querySelectorAll('.node__element');\n      let previousParentId = null;\n      nodes.forEach(node => {\n        const parentId = node.getAttribute('data-parent-id');\n        if (parentId && parentId !== previousParentId) {\n          // Insert line break after each distinct parent node\n          const lineBreak = document.createElement('br');\n          node.insertAdjacentElement('beforebegin', lineBreak);\n          previousParentId = parentId;\n        }\n      });\n    };\n    this.getTrieUI = (node, value = '') => {\n      const {\n        children\n      } = node;\n      if (!node) {\n        return '';\n      }\n      let childrenUI = '';\n      for (const char in children) {\n        if (children.hasOwnProperty(char)) {\n          const childNode = children[char];\n          childrenUI += this.getTrieUI(childNode, char);\n        }\n      }\n      return `\n        <div class=\"node__container node\">\n            <div class=\"node__element\" data-node-id=\"${value}\">\n                ${value}\n            </div>\n            ${childrenUI ? `\n                    <div class=\"node__bottom-line\"></div>\n                    <div class=\"node__children\">\n                        ${childrenUI}\n                    </div>\n                    ` : ''}\n        </div>\n    `;\n    };\n    this.trie = trieInstance;\n    this.actionsContainerSelector = '.rb-actions-container';\n    this.trieContainerSelector = '#trie-container';\n    this.root = trieInstance.root;\n  }\n  template() {\n    return `\n        <div class=\"btn-group\">\n          <button id=\"insertrbnode\" class=\"btn btn-warning\">\n            Insert Node\n          </button>\n          <button id=\"removerbnode\" class=\"btn btn-dark\">\n            Remove Node\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button id=\"deleterbtree\" class=\"btn btn-danger\">\n            Delete Tree\n          </button>\n        </div>\n          <div class=\"btn-group\">\n            <button id=\"PreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\n              Hide Balance Tree Preview\n            </button>\n          </div>\n        `;\n  }\n  setTemplate() {\n    const actionsContainer = document.querySelector(this.actionsContainerSelector);\n    actionsContainer.innerHTML = this.template();\n  }\n  init() {\n    this.setTemplate();\n    const insert = document.querySelector('#insertrbnode');\n    const removeElementBtn = document.querySelector('#removerbnode');\n    const delBtn = document.querySelector('#deleterbtree');\n    // const toggleBalancePreviewBtn = document.querySelector('#PreviewBtn');\n    insert.addEventListener('click', this.onInsertTrieClick.bind(this));\n    // removeElementBtn.addEventListener('click', this.onRemoverbClick.bind(this));\n    // delBtn.addEventListener('click', this.onResetrbClick.bind(this));\n    // toggleBalancePreviewBtn.addEventListener('click', () => {this.resetBalancedTreeView();});\n  }\n}\nexport { Trie, TrieRenderer };","map":{"version":3,"names":["TrieNode","constructor","children","isEndofword","Trie","root","insert","word","console","log","currentnode","i","length","char","search","TrieRenderer","trieInstance","onInsertTrieClick","element","promptAsync","trie","renderTrie","promptMessage","Promise","resolve","userInput","prompt","trieContainer","document","querySelector","trieContainerSelector","innerHTML","getTrieUI","nodes","querySelectorAll","previousParentId","forEach","node","parentId","getAttribute","lineBreak","createElement","insertAdjacentElement","value","childrenUI","hasOwnProperty","childNode","actionsContainerSelector","template","setTemplate","actionsContainer","init","removeElementBtn","delBtn","addEventListener","bind"],"sources":["/Users/gokulkrishnan/College/project/treeviz/src/RB/tries.js"],"sourcesContent":["class TrieNode {\n    constructor() {\n    this.children = {};\n    this.isEndofword = false;\n    }\n}\n\nclass Trie{\n    constructor() {\n        this.root=new TrieNode();\n        \n    }\n    insert(word)\n    {\n        console.log(\"inside insert\"+word);\n        let currentnode=this.root;\n        for(let i=0;i<word.length;i++)\n        {\n            const char=word[i];\n            if(!currentnode.children[char])\n            {\n                currentnode.children[char]=new TrieNode();\n            }\n            currentnode=currentnode.children[char];\n        }\n        currentnode.isEndofword=true;\n        \n    }\n    search(word)\n    {\n        let currentnode=this.root;\n        for(let i=0;i<word.length;i++)\n        {\n            const char=word[i];\n            if(!currentnode.children[char])\n            {\n                return false;\n            }\n            currentnode=currentnode.children[char];\n        }\n        return currentnode.isEndofword;\n\n    }\n}\n\nclass TrieRenderer {\n    constructor(trieInstance) {\n        this.trie = trieInstance;\n        this.actionsContainerSelector = '.rb-actions-container';\n        this.trieContainerSelector = '#trie-container';\n        this.root = trieInstance.root;\n    }\n    template() {\n        return `\n        <div class=\"btn-group\">\n          <button id=\"insertrbnode\" class=\"btn btn-warning\">\n            Insert Node\n          </button>\n          <button id=\"removerbnode\" class=\"btn btn-dark\">\n            Remove Node\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button id=\"deleterbtree\" class=\"btn btn-danger\">\n            Delete Tree\n          </button>\n        </div>\n          <div class=\"btn-group\">\n            <button id=\"PreviewBtn\" hidden=\"true\" class=\"btn btn-dark\">\n              Hide Balance Tree Preview\n            </button>\n          </div>\n        `;\n      }\n      setTemplate() {\n        const actionsContainer = document.querySelector(\n          this.actionsContainerSelector\n        );\n        actionsContainer.innerHTML = this.template();\n      }\n\n      init() {\n        this.setTemplate();\n        const insert = document.querySelector('#insertrbnode');\n        const removeElementBtn = document.querySelector('#removerbnode');\n        const delBtn = document.querySelector('#deleterbtree');\n        // const toggleBalancePreviewBtn = document.querySelector('#PreviewBtn');\n        insert.addEventListener('click', this.onInsertTrieClick.bind(this));\n        // removeElementBtn.addEventListener('click', this.onRemoverbClick.bind(this));\n        // delBtn.addEventListener('click', this.onResetrbClick.bind(this));\n        // toggleBalancePreviewBtn.addEventListener('click', () => {this.resetBalancedTreeView();});\n      }\n\n    onInsertTrieClick = async () => {\n        const element = await this.promptAsync('Enter word to insert into the trie');\n        if (!element) {\n            return;\n        }\n        console.log(\"before call\"+element);\n        this.trie.insert(element);\n        this.renderTrie();\n    };\n\n    promptAsync = (promptMessage) => {\n        return new Promise(resolve => {\n            const userInput = prompt(promptMessage);\n            resolve(userInput);\n        });\n    };\n\n    renderTrie = () => {\n        const trieContainer = document.querySelector(this.trieContainerSelector);\n        trieContainer.innerHTML = this.getTrieUI(this.root);\n    \n        // Add line breaks based on common prefixes\n        const nodes = trieContainer.querySelectorAll('.node__element');\n        let previousParentId = null;\n    \n        nodes.forEach((node) => {\n            const parentId = node.getAttribute('data-parent-id');\n    \n            if (parentId && parentId !== previousParentId) {\n                // Insert line break after each distinct parent node\n                const lineBreak = document.createElement('br');\n                node.insertAdjacentElement('beforebegin', lineBreak);\n                previousParentId = parentId;\n            }\n        });\n    };\n\ngetTrieUI = (node, value = '') => {\n    const { children } = node;\n\n    if (!node) {\n        return '';\n    }\n\n    let childrenUI = '';\n    for (const char in children) {\n        if (children.hasOwnProperty(char)) {\n            const childNode = children[char];\n            childrenUI += this.getTrieUI(childNode, char);\n        }\n    }\n\n    return `\n        <div class=\"node__container node\">\n            <div class=\"node__element\" data-node-id=\"${value}\">\n                ${value}\n            </div>\n            ${\n                childrenUI\n                    ? `\n                    <div class=\"node__bottom-line\"></div>\n                    <div class=\"node__children\">\n                        ${childrenUI}\n                    </div>\n                    `\n                    : ''\n            }\n        </div>\n    `;\n};   \n}\nexport { Trie, TrieRenderer };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}